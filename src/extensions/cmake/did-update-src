#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
# Create fresh CMakeSourcesAndHeaders.txt from filesystem information
#
DEFAULT_SOURCE_DIRS="src"


emit_cmake_var()
{
   local name="$1"; shift
   local emitter="$1"; shift

   local contents

   # quote paths with spaces only
   contents="`${emitter} "$@" | sed '/ /s/\(.*\)/"\1"/'`"
   if [ -z "${contents}" ]
   then
      return
   fi

   cat <<EOF
set( ${name}
$contents
)

EOF
}


filter_lines()
{
   if [ -f "$1" ]
   then
      fgrep -v -x -f "$1"
   else
      cat
   fi
}


find_headers()
{
   find "$@" \( -name "*.h" -o -name "*.inc" \) -print  \
      | egrep -v '/old/|/build/' \
      | filter_lines ".ignore_headers"
}



find_sources()
{
   find "$@" \( -name "*.c" -o -name "*.m" -o -name "*.cpp" -o -name "*.aam" \) -print  \
      | egrep -v '/old/|/build/' \
      | filter_lines ".ignore_sources"
}


#
# header emission
#
_emit_include_dirs_contents()
{
   local headers="$1"

   local i

   old="$IFS"
   IFS="
"
   for i in ${headers}
   do
      echo "`dirname -- "${i}"`"
   done
   IFS="$old"
}


emit_include_dirs_contents()
{
   _emit_include_dirs_contents "$@" | sort -u
}


emit_header_contents()
{
   local headers="$1"

   egrep -v '\+Private\.h|_private\.h' <<< "${headers}"
}


emit_private_header_contents()
{
   local headers="$1"

   egrep '\+Private\.h|_private\.h' <<< "${headers}"
}


emit_header_info()
{
   local headers

   headers="`find_headers "$1"`"

   emit_cmake_var "INCLUDE_DIRS" emit_include_dirs_contents "${headers}"
   emit_cmake_var "PUBLIC_HEADERS" emit_header_contents "${headers}"
   emit_cmake_var "PRIVATE_HEADERS" emit_private_header_contents "${headers}"
}


#
# sources
#


emit_source_contents()
{
   local sources="$1"

   egrep -v '\Standalone\.|_standalone\.' <<< "${sources}"
}


emit_standalone_source_contents()
{
   local sources="$1"

   egrep '\Standalone\.|_standalone\.' <<< "${sources}"
}


emit_source_info()
{
   local sources

   sources="`find_sources "$1"`"

   emit_cmake_var "SOURCES" emit_source_contents "${sources}"
   emit_cmake_var "STANDALONE_SOURCES" emit_standalone_source_contents "${sources}"
}


emit_cmake_sources_and_headers()
{
   emit_header_info "$1"
   emit_source_info "$1"
}


#
#
#
existing_source_dirs()
{
   local i
   local old

   local i

   old="$IFS"
   IFS="
"
   for i in "$@"
   do
      if [ -d "${i}" ]
      then
         echo "${i}"
      fi
   done
   IFS="$old"
}


main()
{
   local output

   output=""

   local OPTION_DIRECTORY

   while [ $# -ne 0 ]
   do
      case "$1" in
         -o|--output)
            [ $# -eq 1 ] && usage
            shift

            output="$1"
         ;;

         -d|--directory)
            [ $# -eq 1 ] && usage
            shift

            if [ -z "${OPTION_DIRECTORY}" ]
            then
               OPTION_DIRECTORY="$1"
            else
               OPTION_DIRECTORY="${OPTION_DIRECTORY}
$1"
            fi
         ;;

         -*)
            echo "unknown option $1" >&2
            exit 1
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   PROJECT_MAKEFILE="${1:-CMakeSourcesAndHeaders.txt}"
   CHANGEDFILE="$2"

   if [ -z "${output}" ]
   then
      output="${PROJECT_MAKEFILE}"
   fi

   OPTION_DIRECTORY="${OPTION_DIRECTORY:-${DEFAULT_SOURCE_DIRS}}"

   local directories

   directories="`existing_source_dirs "${OPTION_DIRECTORY}"`"
   if [ -z "${directories}" ]
   then
      echo "mulle-sde-update-cmake warning: No actual existing source directories found. (${OPTION_DIRECTORY})" >&2
      exit 0
   fi

   if [ "${output}" = "-" ]
   then
      emit_cmake_sources_and_headers "${directories}"
   else
      if [ -f "${output}" ]
      then
         mv "${output}" "${output}.bak"
      fi
      emit_cmake_sources_and_headers "${directories}" > "${output}"
   fi
}

main "$@"


