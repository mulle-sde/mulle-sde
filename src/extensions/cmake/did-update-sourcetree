#! /usr/bin/env bash

[ "${TRACE}" = "YES" ] && set -x


#
# Need to know:
#
#  not supported OS names (as cmake ? or UNAME ?)
#  alternative names (for cmake to find)
#  language (c objc, for template generation)
#
#  Store it in userinfo:
#
cmake_library_definition()
{
   local name="$1"

   local s

   # 1. interpret camelcase
   s="$(sed -e 's|\([a-z]\)\([A-Z][a-z]\)|\1_\2|g' <<< "${name}" )"

   # 2. uppercase it
   s="$(tr 'a-z' 'A-Z' <<< "$s" )"

   # 3. make unprintables underscores
   s="$(sed -e 's|[^A-Za-z0-9_]|_|g' <<< "$s" )"

   # 4. remove uglies
   s="$(sed -e 's|__|_|g' <<< "$s" )"

   echo "$s"
}


emit_c_dependency()
{
   local name="$1"

   local definition

   definition="`cmake_library_definition "${name}" `"
   definition="${definition}_LIBRARY"

   cat <<EOF
   if( NOT ${definition})
      find_library( ${definition} NAMES ${name})
      message(STATUS "${definition} is \${${definition}}")
      set( C_DEPENDENCY_LIBRARIES
         \${${definition}}
         \${C_DEPENDENCY_LIBRARIES}
         CACHE INTERNAL "need to cache this"
      )
   endif()
EOF
}


emit_objc_dependency()
{
   local name="$1"

   cat <<EOF

   include( \${DEPENDENCIES_DIR}/include/${name}/CMakeDependencies.txt)
EOF
}



_emit_objc_os_specific_dependency()
{
   local name="$1"
   local osname="2"
   local indent="$3"
   local suffix="$4"

   local definition

   definition="`cmake_library_definition "${name}" `"
   definition="${definition}_${suffix}"

   cat <<EOF
${indent}if( NOT ${definition})
${indent}   find_library( ${definition} NAMES ${name})
${indent}   message( STATUS "${definition} is \${${definition}}")
${indent}   if( ${definition})
${indent}      set( OBJC_DEPENDENCY_LIBRARIES
${indent}         \${${definition}}
${indent}         \${OBJC_DEPENDENCY_LIBRARIES}
${indent}         CACHE INTERNAL "need to cache this"
${indent}      )
${indent}      set( OBJC_DEPENDENCY_NAMES
${indent}         ${name}
${indent}         \${OBJC_DEPENDENCY_NAMES}
${indent}         CACHE INTERNAL "need to cache this too"
${indent}      )
${indent}   endif()
${indent}endif()
EOF
}


emit_objc_os_specific_dependency()
{
   local name="$1"
   local osname="$2"

   local indent=""
   local suffix

   suffix="LIBRARY"

   if [ ! -z "${osname}" ]
   then
      osname="$(tr 'a-z' 'A-Z' <<< "${osname}" )"
      suffix="${osname}_LIBRARY"
      echo "   if( HAVE_$osname)"
      indent="   "
   fi

   _emit_objc_os_specific_dependency "${name}" "${definition}" "    ${indent}" "${suffix}"

   if [ ! -z "${osname}" ]
   then
      echo "   endif()"
   fi
}


_emit_c_os_specific_dependency()
{
   local name="$1"
   local osname="2"
   local indent="$3"
   local suffix="$4"

   local definition

   definition="`cmake_library_definition "${name}" `"
   definition="${definition}_${suffix}"

   cat <<EOF
${indent}if( NOT ${definition})
${indent}   find_library( ${definition} NAMES ${name})
${indent}   message( STATUS "${definition} is \${${definition}}")
${indent}   if( ${definition})
${indent}      set( OBJC_DEPENDENCY_LIBRARIES
${indent}         \${${definition}}
${indent}         \${OBJC_DEPENDENCY_LIBRARIES}
${indent}         CACHE INTERNAL "need to cache this"
${indent}      )
${indent}      set( OBJC_DEPENDENCY_NAMES
${indent}         ${name}
${indent}         \${OBJC_DEPENDENCY_NAMES}
${indent}         CACHE INTERNAL "need to cache this too"
${indent}      )
${indent}   endif()
${indent}endif()
EOF
}


emit_c_os_specific_dependency()
{
   local name="$1"
   local osnames="2"

   local definition

   definition="`cmake_library_definition "${name}" `"
   definition="${definition}_${suffix}"

   local indent=""
   local suffix

   suffix="LIBRARY"

   local clause

   for i in ${osnames}
   do
      i="$(tr 'a-z' 'A-Z' <<< "${i}" )"
      if [ -z "${clause}" ]
      then
         clause="${i}"
      else
         clause="${clause} OR {i}"
      fi
   dome

   if [ ! -z "${clause}" ]
   then
      suffix="${osname}_LIBRARY"
      echo "   if( ${clause})"
      indent="   "
   fi

   if [ ! -z "${clause}" ]
   then
      echo "   endif()"
   fi
}


main()
{
   local name="$1"; shift
   local libtype="$1"; shift

   case "${libtype}" in
      c)
         emit_c_dependency "${name}" "$@"
      ;;

      objc)
         emit_objc_dependency "${name}" "$@"
      ;;

      objc-os-specific)
         emit_objc_os_specific_dependency "${name}" "$@"
      ;;

      *)
         echo "unknown $libtype" >&2
         exit 1
      ;;
   esac
}


main "$@"
