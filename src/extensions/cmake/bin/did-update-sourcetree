#! /usr/bin/env bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#

[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"


usage()
{
   cat <<EOF >&2
Usage:
   did-update-sourcetree

   Let mulle-sde update or monitor run this for you.
EOF
   exit 1
}


# https://cmake.org/Wiki/CMake_Checking_Platform
uname_to_cmake()
{
   log_entry "uname_to_cmake" "$@"

   local uname="$1"

   case "${uname}" in
      darwin)
         echo "APPLE"
      ;;

      freebsd)
         echo "FREEBSD"  # not really there AFAIK
      ;;

      linux|freebsd|win32|mingw|msys|cygwin)
         tr 'a-z' 'A-Z' <<< "${uname}"
      ;;

      *)
         log_warning "$1 assumed not to be a OS"
      ;;
   esac
}


osexclude_to_cmake_if()
{
   log_entry "osexclude_to_cmake_if" "$@"

   local osexcludes="$1"

   local cmakevar

   local excludes
   local onlys

   IFS=","
   for osexclude in ${osexcludes}
   do
      IFS="${DEFAULT_IFS}"

      case "${osexclude}" in
         only-*)
            cmakevar="`uname_to_cmake "${osexclude:5}"`"
            onlys="`concat "${excludes}" "${cmakevar}" " OR " `"
         ;;

         no-*)
            cmakevar="`uname_to_cmake "${osexclude:3}"`"
            excludes="`concat "${onlys}" "${cmakevar}" " AND "`"
         ;;

         *)
            log_warning "weird mark \"${osexclude}\""
         ;;
      esac
   done
   IFS="${DEFAULT_IFS}"

   if [ ! -z "${onlys}" ]
   then
      echo "if( ${onlys})"
      return
   fi

   if [ ! -z "${excludes}" ]
   then
      case "${excludes}" in
         *" OR "*)
            echo "if( NOT (${excludes}))"
         ;;

         *)
            echo "if( NOT ${excludes})"
         ;;
      esac
   fi
}


emit_cmake_legacy_dependency()
{
   log_entry "emit_cmake_legacy_dependency" "$@"

   local name="$1"
   local osexcludes="$2"
   local aliases="$3"
   local containername="$4"

   local indent
   local ifstatement
   local endifstatement

   if [ ! -z "${osexcludes}" ]
   then
      ifstatement="`osexclude_to_cmake_if "${osexcludes}" `"
      indent="   "
   fi

   local cmakevar
   local identifier

   identifier="` tr '-' '_'  <<< "${name}" `"
   identifier="` tr 'a-z' 'A-Z' <<< "${identifier}" `"

   if [ ! -z "${ifstatement}" ]
   then
      echo "${ifstatement}"
   fi

   local names

   names="` concat "${name}" "${aliases}" `"

   cat << EOF
${indent}if( NOT ${identifier}_LIBRARY)
${indent}   find_library( ${identifier}_LIBRARY NAMES ${names})
${indent}   message(STATUS "${identifier}_LIBRARY is \${${identifier}_LIBRARY}")
${indent}   set( ${containername}
${indent}      \${${identifier}_LIBRARY}
${indent}      \${${containername}}
${indent}      CACHE INTERNAL "need to cache this"
${indent}   )
${indent}endif()
EOF
   if [ ! -z "${ifstatement}" ]
   then
      echo "endif()"
   fi

   echo
}


emit_cmake_include_dependency()
{
   log_entry "emit_cmake_include_dependency" "$@"

   local name="$1"
   local osexcludes="$2"

   local indent
   local ifstatement

   if [ ! -z "${osexcludes}" ]
   then
      ifstatement="`osexclude_to_cmake_if "${osexcludes}" `"
      indent="   "
   fi

   if [ ! -z "${ifstatement}" ]
   then
      echo "${ifstatement}"
   fi

   cat << EOF
${indent}include( "\${DEPENDENCIES_DIR}/include/${name}/CMakeDependenciesAndLibraries.txt")
EOF
   if [ ! -z "${ifstatement}" ]
   then
      echo "endif()"
   fi

   echo
}


#
# collect libraries and dependencies, with routines in
# mulle-sde-updatesupport.sh for reuse with stuff other than cmake
#
emit_cmake_libraries()
{
   log_entry "emit_cmake_libraries" "$@"

   local libraries

   libraries="`get_libraries_list`"
   emit_libraries "${dependencies}" emit_cmake_legacy_dependency
}


emit_cmake_dependencies()
{
   log_entry "emit_cmake_dependencies" "$@"

   local dependencies

   # OBJC is in this
   dependencies="`get_include_dependencies_list`"
   emit_dependencies "${dependencies}" emit_cmake_include_dependency

   dependencies="`get_no_include_dependencies_list`"
   emit_dependencies "${dependencies}" emit_cmake_legacy_dependency "C_DEPENDENCY_LIBRARIES"
}


main()
{
   log_entry "main" "$@"

   # technical flags
   local MULLE_FLAG_DONT_DEFER="NO"
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_FOLLOW_SYMLINKS="YES"
   local MULLE_FLAG_LOG_CACHE="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_TRACE_PATHS_FLIP_X="NO"
   local MULLE_TRACE_POSTPONE="NO"
   local MULLE_TRACE_RESOLVER_FLIP_X="NO"
   local MULLE_TRACE_SETTINGS_FLIP_X="NO"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help)
            usage
         ;;

         -*)
            log_error "unknown option \"$1\""
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local text_lib
   local text_dep

   text_lib="`emit_cmake_libraries`"  || return 1
   text_dep="`emit_cmake_dependencies`"  || return 1

   if [ -z "${text_lib}" ]
   then
      text_lib="# no libraries"
   fi
   if [ -z "${text_dep}" ]
   then
      text_dep="# no dependencies"
   fi

   text_lib="# This file will be regenerated by \`mulle-sde output|monitor\`. Edits will be lost.
${text_lib}"

   text_dep="# This file will be regenerated by \`mulle-sde output|monitor\`. Edits will be lost.

${text_dep}"

   log_fluff "Create cmake files (${PWD})"

   MULLE_SDE_LIBRARIES_FILE="${MULLE_SDE_LIBRARIES_FILE:-_CMakeLibraries.txt}"
   MULLE_SDE_DEPENDENCIES_FILE="${MULLE_SDE_DEPENDENCIES_FILE:-_CMakeDependencies.txt}"

   log_verbose "Writing ${C_RESET_BOLD}${MULLE_SDE_LIBRARIES_FILE}"
   redirect_exekutor "${MULLE_SDE_LIBRARIES_FILE}" echo "${text_lib}"
   log_verbose "Writing ${C_RESET_BOLD}${MULLE_SDE_DEPENDENCIES_FILE}"
   redirect_exekutor "${MULLE_SDE_DEPENDENCIES_FILE}" echo "${text_dep}"
}


_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions-env not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || exit 1

   if [ -z "${MULLE_SDE_LIBEXEC_DIR}" ]
   then
      MULLE_SDE_LIBEXEC_DIR="`mulle-sde "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_SDE_LIBEXEC_DIR}" ] && \
         echo "mulle-sde not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-updatesupport.sh" || exit 1
}


_init "$@"
main "$@"
