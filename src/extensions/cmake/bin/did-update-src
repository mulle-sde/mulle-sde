#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
# Create fresh CMakeHeadersAndSources.cmake from filesystem information
#
[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"


emit_cmake_var()
{
   log_entry "emit_cmake_var" "$@"

   local name="$1"
   local contents="$2"

   if [ -z "${contents}" ]
   then
      return
   fi

   contents="`echo "${contents}" | sed '/ /s/\(.*\)/"\1"/'`"

   cat <<EOF
set( ${name}
${contents}
)

EOF
}


emit_header_info()
{
   log_entry "emit_header_info" "$@"

   local headers

   headers="`find_headers "$@"`"

   local directories

   directories="`emit_include_dirs_contents "${headers}" `"
   emit_cmake_var "INCLUDE_DIRS" "${directories}"

   local executable
   local exedir

   executable="${MULLE_SDE_CLASSIFY_HEADERS}"
   if [ -z "${executable}" ]
   then
      exedir="`dirname -- "$0" `"
      executable="${exedir}/classify-headers"
      if [ ! -x "${executable}" ]
      then
         # developer support
         executable="${exedir}/../../c/bin/classify-headers"
      fi
   fi
   if [ -x "${executable}" ]
   then
      emit_classified_files "${executable}" "${headers}" emit_cmake_var
   else
      log_fluff "Header classifier \"${executable}\" not found, using default emitter"
      emit_cmake_var "HEADERS" "${headers}"
   fi
}


#
# sources
#
emit_source_info()
{
   log_entry "emit_source_info" "$@"

   local sources

   sources="`find_sources "$@"`"

   local executable
   local exedir

   executable="${MULLE_SDE_CLASSIFY_HEADERS}"
   if [ -z "${executable}" ]
   then
      exedir="`dirname -- "$0" `"
      executable="${exedir}/classify-sources"
      if [ ! -x "${executable}" ]
      then
         # developer support
         executable="${exedir}/../../c/bin/classify-sources"
      fi
   fi
   if [ -x "${executable}" ]
   then
      emit_classified_files "${executable}" "${sources}" emit_cmake_var
   else
      log_fluff "Source classifier \"${executable}\" not found, using default emitter"
      emit_cmake_var "SOURCES" "${sources}"
   fi
}


main()
{
   log_entry "main" "$@"

   # technical flags
   local MULLE_FLAG_DONT_DEFER="NO"
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_FOLLOW_SYMLINKS="YES"
   local MULLE_FLAG_LOG_CACHE="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_TRACE_PATHS_FLIP_X="NO"
   local MULLE_TRACE_POSTPONE="NO"
   local MULLE_TRACE_RESOLVER_FLIP_X="NO"
   local MULLE_TRACE_SETTINGS_FLIP_X="NO"

   local OPTION_DIRECTORIES

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help)
            usage
         ;;

         -d|--directory)
            [ $# -eq 1 ] && usage
            shift

            OPTION_DIRECTORIES="`add_line "${OPTION_DIRECTORIES}" "$1" `"
         ;;

         -*)
            log_error "unknown option \"$1\""
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"


   while [ $# -ne 0 ]
   do
      case "$1" in
         -*)
            echo "unknown option $1" >&2
            exit 1
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   CHANGEDFILE="$1"

   local directories

   directories="`source_directories "${OPTION_DIRECTORIES}" `"
   if [ -z "${directories}" ]
   then
      log_warning "No actually existing source \
directories found. (${directorynames})" >&2
      exit 0
   fi

   local text_hdr
   local text_src

   text_hdr="`emit_header_info "${directories}"`"  || return 1
   text_src="`emit_source_info "${directories}"`"  || return 1

   if [ -z "${text_hdr}" ]
   then
      text_hdr="# no headers"
   fi
   if [ -z "${text_src}" ]
   then
      text_src="# no sources ???"
   fi

   text_hdr="# This file will be regenerated by \`mulle-sde output|monitor\`. Edits will be lost.
${text_hdr}"

   text_src="# This file will be regenerated by \`mulle-sde output|monitor\`. Edits will be lost.

${text_src}"

   log_fluff "Create cmake files (${PWD})"

   MULLE_SDE_HEADERS_FILE="${MULLE_SDE_HEADERS_FILE:-_CMakeHeaders.cmake}"
   MULLE_SDE_SOURCES_FILE="${MULLE_SDE_SOURCES_FILE:-_CMakeSources.cmake}"

   log_verbose "Writing ${C_RESET_BOLD}${MULLE_SDE_HEADERS_FILE}"
   redirect_exekutor "${MULLE_SDE_HEADERS_FILE}" echo "${text_hdr}"
   log_verbose "Writing ${C_RESET_BOLD}${MULLE_SDE_SOURCES_FILE}"
   redirect_exekutor "${MULLE_SDE_SOURCES_FILE}" echo "${text_src}"
}


_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions-env not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || exit 1

   # so it can run outside of MULLE_SDE
   if [ -z "${MULLE_SDE_LIBEXEC_DIR}" ]
   then
      MULLE_SDE_LIBEXEC_DIR="`mulle-sde "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_SDE_LIBEXEC_DIR}" ] && \
         echo "mulle-sde not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-updatesupport.sh" || exit 1
}

_init "$@"
main "$@"


