#! /usr/bin/env bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION=0.14.1
MULLE_EXECUTABLE_BASHFUNCTIONS="1"


#
# This is the main user interface to mulle-sde
# sorta like git
#

trap_fail()
{
   exit 1
}


print_commands()
{
   local show_all="${1:-NO}"

   HIDDEN_COMMANDS="\
   callback       : manage callbacks
   fetch          : fetch the sourcetree
   find           : find files that match patternfiles
   init-and-enter : create a new project then immediately start a subshell
   libexec-dir    : print path to mulle-sde libexec
   mark           : add a mark to a dependency or library
   match          : experiment with patternfiles
   patternfile    : manage patternfiles
   task           : manage tasks
   test           : run tests using mulle-test
   uname          : mulle-sdes simplified uname(1)
   unmark         : add a mark to a dependency or library"

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      SHOWN_COMMANDS="\
   extension      : show available language and buildtool extensions
   init           : create a new project"

      HIDDEN_COMMANDS="\
   clean          : clean various parts of the project
   craft          : build the project using mulle-craft
   dependency     : manage third party components (like GitHub projects)
   environment    : manage environment variables (project settings)
   clean          : clean various parts of the project
   craft          : build the project using mulle-craft
   dependency     : manage third party components (like GitHub projects)
   environment    : manage environment variables (project settings)
   extension      : show available language and buildtool extensions
   init           : create a new project
   library        : manage second party (OS) libraries (like pthread)
   monitor        : monitor project files, run update and build
   subproject     : manage local subprojects
   update         : update project makefiles"
   else
      SHOWN_COMMANDS="\
   clean          : clean various parts of the project
   craft          : build the project using mulle-craft
   dependency     : manage third party components (like GitHub projects)
   environment    : manage environment variables (project settings)
   extension      : show available language and buildtool extensions
   init           : create a new project
   library        : manage second party (OS) libraries (like pthread)
   monitor        : monitor project files, run update and build
   subproject     : manage local subprojects
   update         : update project makefiles"
   fi

   echo "${SHOWN_COMMANDS}" | sort

   if [ "${show_all}" != "NO" ]
   then
      echo "${HIDDEN_COMMANDS}" | sort
   fi
}


print_flags()
{
   local delimiter

   delimiter="          : "

   echo "   -e   ${delimiter}bypass mulle-env check"
   echo "   -f   ${delimiter}force operation"

   options_technical_flags_usage "${delimiter}"
}


_usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command] [options]

   The commandline IDE.

EOF
   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      cat <<EOF
   Create a new project with \`mulle-sde init\` or enter an existing one with
   \`mulle-sde <directory>\`.

EOF
   else
      cat <<EOF
   To start development run \`mulle-sde monitor\` in this shell and edit your
   source files in 'src' in another shell. Or periodically run
   \`mulle-sde update\` followed by \`mulle-sde craft\` to build.

EOF
   fi

   cat <<EOF
Flags:
EOF
   print_flags  | sort


   cat <<EOF

Commands:
EOF

   print_commands "${verbose}" | sort

   if [ "${verbose}" = "NO" ]
   then
      cat <<EOF
      (use mulle-sde -v help to show more commands)
EOF
   fi

   cat <<EOF

   Options are command specific. Use ${MULLE_USAGE_NAME} <command> -h for help.
EOF

   exit 1
}


usage()
{
   _usage "$@" >&2
   exit 1
}


determine_project_dir()
{
   local current

   current="`pwd -P`"

   while [ "${current}" != "/" ]
   do
      if [ -d "${current}/.mulle-sde" ]
      then
         exekutor echo "${current}"
         return
      fi

      if [ -z "${MULLE_PATH_SH}" ]
      then
         . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" || return 1
      fi
      if [ -z "${MULLE_FILE_SH}" ]
      then
         . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" || return 1
      fi

      current="`fast_dirname "${current}"`"
   done
   return 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NO"

   # technical flags
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         -e)
            FLAG_OUTSIDE_ENV="YES"
            MULLE_CRAFT_FLAGS="`concat "${MULLE_CRAFT_FLAGS}" "$1" `"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="YES"
            MULLE_CRAFT_FLAGS="`concat "${MULLE_CRAFT_FLAGS}" "$1" `"
         ;;

         --git-terminal-prompt)
            [ $# -eq 1 ] && fail "missing argument to \"$1\""
            MULLE_CRAFT_FLAGS="`concat "${MULLE_CRAFT_FLAGS}" "$1" `"
            shift

            GIT_TERMINAL_PROMPT="$1"
            export GIT_TERMINAL_PROMPT

            MULLE_CRAFT_FLAGS="`concat "${MULLE_CRAFT_FLAGS}" "$1" `"
         ;;

         --style)
            [ $# -eq 1 ] && fail "missing argument to \"$1\""
            MULLE_ENV_FLAGS="`concat "${MULLE_ENV_FLAGS}" "$1" `"
            shift

            MULLE_ENV_FLAGS="`concat "${MULLE_ENV_FLAGS}" "$1" `"
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            log_error "Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local cmd

   cmd="$1"
   [ $# -ne 0 ] && shift

   if [ "${FLAG_OUTSIDE_ENV}" = "YES" ]
   then
      MULLE_VIRTUAL_ROOT="${PWD}"
      export MULLE_VIRTUAL_ROOT
   fi

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      case "${cmd}" in
         all|build|clean|craft|onlydependencies|nodependencies|project|sourcetree)
            fail "To run ${MULLE_USAGE_NAME} outside of mulle-env, pass the -e flag"
         ;;
         dependency|library|monitor|subproject|minion|style|update)
            fail "To run ${MULLE_EXECUTABLE_NAME} outside of mulle-env, pass the -e flag"
         ;;
      esac
   fi

   MULLE_SDE_DIR="${MULLE_VIRTUAL_ROOT}/.mulle-sde"
   MULLE_SDE_ETC_DIR="${MULLE_SDE_ETC_DIR:-${MULLE_SDE_DIR}/etc}"
   MULLE_EXECUTABLE_OPTIONS="$@"

   MULLE_SOURCETREE="${MULLE_SOURCETREE:-`command -v mulle-sourcetree`}"
   [ -z "${MULLE_SOURCETREE}" ] && fail "mulle-sourcetree not in PATH"

   MULLE_MONITOR="${MULLE_MONITOR:-`command -v mulle-monitor`}"
   [ -z "${MULLE_MONITOR}" ] && fail "mulle-monitor not in PATH"

   MULLE_ENV="${MULLE_ENV:-`command -v mulle-env`}"
   [ -z "${MULLE_ENV}" ] && fail "mulle-env not in PATH"

   MULLE_CRAFT="${MULLE_CRAFT:-`command -v mulle-craft`}"
   [ -z "${MULLE_CRAFT}" ] && fail "mulle-craft not in PATH"

   MULLE_MATCH="${MULLE_MATCH:-`command -v mulle-match`}"
   [ -z "${MULLE_MATCH}" ] && fail "mulle-match not in PATH"


   case "${cmd}" in
      #
      # forward stuff to mulle-craft verbatim
      #
      all|build|craft|onlydependencies|nodependencies|project|sourcetree)
         # shellcheck source=src/mulle-sde-build.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-build.sh"

         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1
         sde_build_main "${cmd}" "$@"
      ;;

      bash-completion)
         echo "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-bash-completion.sh"
      ;;

      clean)
         # shellcheck source=src/mulle-sde-clean.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-clean.sh"

         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1
         sde_clean_main "$@"
      ;;

      callback|task)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_MONITOR}" ${MULLE_TECHNICAL_FLAGS} \
                  ${MULLE_MONITOR_FLAGS} "${cmd}" "$@"
      ;;

      dependency)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         # shellcheck source=src/mulle-sde-dependency.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-dependency.sh"

         sde_dependency_main "$@"
      ;;

      environment)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_ENV}" ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_ENV_FLAGS} "${cmd}" "$@"
      ;;

      extension)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         # shellcheck source=src/mulle-sde-extension.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-extension.sh"

         sde_extension_main "$@"
      ;;

      find)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_MATCH}" ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_MATCH_FLAGS} "find" \
                          --format "%t/%c: %f\\n" "$@"
      ;;

      init)
         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh"

         sde_init_main "$@"
      ;;

      reinit)
         if [ "${MULLE_FLAG_MAGNUM_FORCE}" != "YES" ]
         then
            fail "You must run ${C_RESET_BOLD}reinit${C_ERROR} with the -f flag, as it is destructive!"
         fi

         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh"

         sde_init_main --reinit "$@"
      ;;

      init-and-enter)
         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh"

         # interactive shell, dont set usage
         sde_init_main --no-blurb "$@" &&
            exekutor "${MULLE_ENV}" ${MULLE_TECHNICAL_FLAGS} ${MULLE_ENV_FLAGS}
      ;;

      fetch)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_CRAFT}" ${MULLE_TECHNICAL_FLAGS} \
               ${MULLE_CRAFT_FLAGS} "${cmd}" "$@"
      ;;

      library)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         # shellcheck source=src/mulle-sde-library.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-library.sh"

         sde_library_main "$@"
      ;;

      libexec-dir|library-path)
         exekutor echo "${MULLE_SDE_LIBEXEC_DIR}"
      ;;


      mark|unmark)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_SOURCETREE}" ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_SOURCETREE_FLAGS} "${cmd}" "$@"

      ;;

      match|patternfile)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_MATCH}" ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_MATCH_FLAGS} "${cmd}" "$@"
      ;;

      monitor)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         # shellcheck source=src/mulle-sde-monitor.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-monitor.sh"

         sde_monitor_main "$@"
      ;;

      motd)
         create_motd "$@"
      ;;

      project-dir)
         determine_project_dir
      ;;

      style)
         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_ENV}" ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_ENV_FLAGS} "${cmd}" "$@"

      ;;

      subproject|minion)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         # shellcheck source=src/mulle-sde-subproject.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-subproject.sh"

         sde_subproject_main "$@"
      ;;

      template)
         # shellcheck source=src/mulle-sde-tool.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-template.sh"

         sde_template_main "$@"
      ;;

      tool)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_ENV}" ${MULLE_TECHNICAL_FLAGS} \
                        ${MULLE_ENV_FLAGS} "${cmd}" "$@"
      ;;

      update)
         exekutor cd "${MULLE_VIRTUAL_ROOT}" || exit 1

         # shellcheck source=src/mulle-sde-update.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-update.sh"

         sde_update_main "$@"
      ;;

      uname)
         exekutor echo "${UNAME}"
      ;;

      version)
         exekutor echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         #
         # If we are inside of the environment it's a mistyped command.
         #
         local mistyped

         mistyped="NO"
         if [ ! -z "${MULLE_VIRTUAL_ROOT}" ]
         then
            mistyped="YES"
         else
            if [ ! -z "${cmd}" -a ! -d "${cmd}" ]
            then
               fail "\"${cmd}\" does not exist"
            fi
         fi

         # more than a parameter is also a mistype
         if [ "${mistyped}" = "YES" -o "$#" -ne 0 ]
         then
            if [ ! -z "${cmd}" ]
            then
               log_error "unknown command \"${cmd}\""
            fi
            usage "${MULLE_TRACE}"
         fi

         # interactive shell, dont set usage
         exekutor "${MULLE_ENV}" ${MULLE_ENV_FLAGS} "${cmd}" "$@"
      ;;
   esac
}


########
###
### INIT
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
             echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH (not installed ?)" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || \
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   local _libexec_dir

   _get_libexec_dir "$0" "mulle-sde" "mulle-sde-build.sh"

   MULLE_SDE_LIBEXEC_DIR="${_libexec_dir}"

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         echo "${MULLE_SDE_LIBEXEC_DIR}"
         exit 0
      ;;
   esac

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail
   shopt -s extglob

   MULLE_ARGUMENTS="$*"
}
###
### INIT
###
########



_init "$@" # needs params
main "$@"
