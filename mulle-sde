#! /usr/bin/env bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_SDE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION=0.43.0
MULLE_EXECUTABLE_BASHFUNCTIONS="1"


#
# This is the main user interface to mulle-sde
# sorta like git
#
print_commands()
{
   local show_all="${1:-NO}"


   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      SHOWN_COMMANDS="\
   add            : create a source file from templates
   bash-completion: get bash completion with \`. \$(mulle-sde bash-completion)\`
   init           : create a new project
   show           : show available meta extensions
   status         : show information about the current directory"

      HIDDEN_COMMANDS="\
   environment    : manage environment variables (project settings)
   init-and-enter : create a new project then immediately start a subshell
   install        : install a remote mulle-sde project
   libexec-dir    : print path to mulle-sde libexec
   run            : run a command in a subshell
   style          : show environment style
   uname          : mulle-sdes simplified uname(1)"

   else
      SHOWN_COMMANDS="\
   craftorder     : show craftorder of dependencies
   clean          : clean various parts of the project
   craft          : craft the project using mulle-craft
   dependency     : manage third party components (like GitHub projects)
   environment    : manage environment variables (project settings)
   library        : manage second party (OS) libraries (like pthread)
   log            : show craft results
   list           : list project files (files matching patternfiles)
   reflect        : update project makefiles and sources
   status         : show information about the current project"

      HIDDEN_COMMANDS="\
   craftstatus    : show the craft status of the dependencies
   definition     : change projects craft options like CFLAGS (experimental)
   crun           : craft and run if project is an executable
   callback       : manage reflect callbacks
   extension      : show available language and buildtool extensions
   fetch          : fetch the sourcetree
   init           : create a new project
   linkorder      : show linkorder of built dependencies
   match          : experiment with patternfiles
   monitor        : monitor project files, run reflect and craft
   patternfile    : manage patternfiles
   project-dir    : print project root directory
   project        : rename a project and its files
   subproject     : manage local subprojects
   task           : manage reflect tasks
   test           : run tests using mulle-test
   treestatus     : show the sourcetree status"
   fi

   printf "%s\n" "${SHOWN_COMMANDS}" | LC_ALL=C sort

   if [ "${show_all}" != 'NO' ]
   then
      printf "%s\n" "${HIDDEN_COMMANDS}" | LC_ALL=C sort
   fi
}


print_flags()
{
   local delimiter

   delimiter="          : "

   echo "   -e   ${delimiter}bypass mulle-env check"
   echo "   -f   ${delimiter}force operation"
   echo "   -N   ${delimiter}do not search for enclosing environment"
   echo "   -DKEY=VALUE    : define one-time environment variable"

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      echo "   --style <val>  : see \`mulle-env help\` for style description"
   fi

   options_technical_flags_usage "${delimiter}"
}


_usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command] [options]

   The commandline IDE.

EOF
   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      cat <<EOF
   Create a new project with \`mulle-sde init\` or enter an existing one with
   \`mulle-sde <directory>\`.

EOF
   else
      cat <<EOF
   To start development edit source files in '${PROJECT_SOURCE_DIR}'. When you
   add or delete a source file run \`mulle-sde reflect\`. Use
   \`mulle-sde craft\` to craft your project.
   Add binary libraries with \`mulle-sde library\` and source code libraries
   with \`mulle-sde dependency\`.

EOF
   fi

   cat <<EOF
   See the Wiki for more information:
      https://github.com/mulle-sde/mulle-sde/wiki

Flags:
EOF
   print_flags  | LC_ALL=C sort


   cat <<EOF

Commands:
EOF

   print_commands "${verbose}" | LC_ALL=C sort

   if [ "${verbose}" = 'NO' ]
   then
      cat <<EOF
      (use mulle-sde -v help to show more commands)
EOF
   fi

   cat <<EOF

   Options are command specific. Use ${MULLE_USAGE_NAME} <command> -h for help.
EOF

   exit 1
}


usage()
{
   _usage "$@" >&2
   exit 1
}


set_custom_define()
{
   log_entry "set_custom_define" "$@"

   local keyvalue="$1"

   local key
   local value

   key="${keyvalue%%=*}"

   if [ -z "${key}" ]
   then
      key="${keyvalue}"
   else
      value="${keyvalue#*=}"
   fi

   if [ "${key}" != "`printf "%q" "${key}"`" ]
   then
      fail "Invalid Environment key \"${key}\""
   fi

   eval "export ${key}='${value}'"

   log_fluff "Set environment variable \"${key}\" to \"${!key}\""
}


set_custom_environment()
{
   log_entry "set_custom_environment" "$@"

   local defines="$1"

   local i

   set -o noglob; IFS=$'\n'
   for i in ${defines}
   do
      set +o noglob; IFS="${DEFAULT_IFS}"

      set_custom_define "${i#-D}"
   done
   set +o noglob; IFS="${DEFAULT_IFS}"
}


exec_mulle_env()
{
   rexekutor exec "${MULLE_ENV:-mulle-env}" \
                       ${MULLE_TECHNICAL_FLAGS} \
                       ${MULLE_ENV_FLAGS} \
                       ${MULLE_FWD_FLAGS} \
                       --defines "${MULLE_DEFINE_FLAGS}" "$@"
}


run_mulle_env()
{
   rexekutor "${MULLE_ENV:-mulle-env}" \
                  ${MULLE_TECHNICAL_FLAGS} \
                  ${MULLE_ENV_FLAGS} \
                  ${MULLE_FWD_FLAGS} \
                  --defines "${MULLE_DEFINE_FLAGS}" "$@"
}


r_determine_project_dir()
{
   local directory="$1"

   RVAL="`( cd "${directory}" && run_mulle_env --search-nearest project-dir )`"
}


is_test_directory()
{
   log_entry "is_test_directory" "$@"

   local directory="$1"

   r_filepath_concat "${directory}" ".mulle/share/test"

   rexekutor [ -d "${RVAL}" ]
}


assert_test_environment()
{
   log_entry "assert_test_environment" "$@"

   local cmd="${1:-craft}"

   if [ "${FLAG_TEST_CHECK}" = 'NO' ]
   then
      return
   fi

   if [ "${MULLE_TEST_ENVIRONMENT}" = 'YES' ]
   then
      if is_test_directory "$PWD"
      then
         log_fluff "In test environment as expected"
         return
      fi
      if [ "${MULLE_FLAG_MAGNUM_FORCE}" = 'YES' ]
      then
         return
      fi
      fail "Not inside the test environment. Have you initialized it yet ?!?"
   else
      if ! is_test_directory "$PWD"
      then
         log_debug "Not in a test environment"
         return
      fi
      if [ "${MULLE_FLAG_MAGNUM_FORCE}" = 'YES' ]
      then
         return
      fi
      fail "Use ${C_RESET_BOLD}mulle-sde test $cmd${C_ERROR} inside the test environment instead"
   fi
}


_exec_command_in_subshell()
{
   log_entry "_exec_command_in_subshell" "$@"

   local cmdline="$1"; shift

   local current

   current="`pwd -P`"

   if ! r_determine_project_dir "${current}"
   then
      if [ -d ".mulle-sde" ]
      then
         fail "There is only an old mulle-sde project here ($current).
${C_INFO}It should be upgradable with:
${C_RESET_BOLD}   mulle-sde upgrade
${C_RESET_BOLD}   mulle-sde clean tidy"
      fi
      fail "There is no mulle-sde project here ($current)"
   fi

   if [ "${current}" != "${RVAL}" ]
   then
      [ -z "${MULLE_USER_PWD}" ] && internal_fail "MULLE_USER_PWD not set"
      exekutor cd "${RVAL}"
   fi

   local flag

   set -o noglob # keep it
   for flag in ${MULLE_TECHNICAL_FLAGS} ${MULLE_FWD_FLAGS}
   do
      cmdline="${cmdline}
${flag}"
   done

   while [ $# -ne 0 ]
   do
      cmdline="${cmdline}
$1"
      shift
   done

   MULLE_USAGE_NAME="mulle-sde" exec_mulle_env -C "${cmdline}"
}



#
# This reruns a mulle-sde command via mulle-env, so effectively calling
# this script with the same parameters again, but from inside the environment#
#
exec_command_in_subshell()
{
   log_entry "exec_command_in_subshell" "$@"

   _exec_command_in_subshell "$0" "$@"
}


cd_virtual_root()
{
   local cmd="$1"
   local subenvcheck="${2:-YES}"
   local subenvwarn="${3:-YES}"

   if [ "${subenvcheck}" = 'YES' ]
   then
      case "${MULLE_SHELL_MODE}" in
         *SUBENV*)
            fail "You can not run \`mulle-sde ${cmd}\` inside a sub-environment"
         ;;
      esac
   fi

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      fail "To run ${MULLE_EXECUTABLE_NAME} outside of mulle-env, pass the -e flag"
   fi

   #
   # this check can hit us, if we get a linkorder request in cmake for example
   # but we don't really want to warn then. subenvwarn is a hack
   # to suppress this.
   #
   log_debug "PWD:                ${PWD}"
   log_debug "MULLE_VIRTUAL_ROOT: ${MULLE_VIRTUAL_ROOT}"

   if [ "${PWD}" != "${MULLE_VIRTUAL_ROOT}" ]
   then
      #
      # quick check that we are not passing a "mulle-env" boundary
      #
      if [ -d "${PWD}/.mulle/share/env" ]
      then
         if [ "${subenvwarn}" = 'YES' ]
         then
            log_warning "\"${MULLE_VIRTUAL_ROOT}\" is virtual root, but we are in a subshell already ($PWD)"
         fi
         MULLE_VIRTUAL_ROOT="${PWD}"
      fi
      exekutor cd "${MULLE_VIRTUAL_ROOT}" ||
         fail  "Virtual root directory \"${MULLE_VIRTUAL_ROOT}\" missing \
or inaccessible"
   fi

   # ensure that we are in physical
   cd "`pwd -P`" || fail "could not enter physical virtual root (${MULLE_VIRTUAL_ROOT})"

   # set MULLE_VIRTUAL_ROOT to physical (can have changed above intermittently)
   MULLE_VIRTUAL_ROOT="${PWD}"
}


cd_virtual_root_assert_mulle_sde()
{
   cd_virtual_root "$@"

   [ ! -d "${MULLE_SDE_SHARE_DIR}" ] && fail "There is no ${MULLE_SDE_SHARE_DIR} here"
}


try_to_enter_or_download()
{
   local dst="$1"

   if [ $# -eq 1 ]
   then
      case "$1" in
         *://*)
            local scm

            scm="`exekutor "${MULLE_FETCH:-mulle-fetch}" \
                                 ${MULLE_TECHNICAL_FLAGS} \
                              typeguess "$@"`"
            dst="`exekutor "${MULLE_FETCH:-mulle-fetch}" \
                                 ${MULLE_TECHNICAL_FLAGS} \
                              nameguess -s "${scm}" "$@"`"
            if [ ! -z "${dst}" ]
            then
               exekutor "${MULLE_FETCH:-mulle-fetch}" \
                              ${MULLE_TECHNICAL_FLAGS} \
                              "$@" || exit 1
               MULLE_USAGE_NAME="mulle-sde" \
                  exec_mulle_env "${dst}"
            fi
         ;;

         *)
            if [ -d "$1" ]
            then
               MULLE_USAGE_NAME="mulle-sde" \
                  exec_mulle_env "$@"
            fi
         ;;
        esac
   fi

   log_error "Unknown command \"${cmd}\""
   usage "${MULLE_TRACE}"
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'
   local FLAG_TEST_CHECK='YES'

   local defines

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         -e|--environment-override)
            FLAG_OUTSIDE_ENV='YES'
         ;;

         --no-test-check)
            FLAG_TEST_CHECK='NO'
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
            r_concat "${MULLE_FWD_FLAGS}" "$1"
            MULLE_FWD_FLAGS="${RVAL}"
         ;;

         --git-terminal-prompt)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""

            r_concat "${MULLE_FWD_FLAGS}" "$1"
            MULLE_FWD_FLAGS="${RVAL}"
            shift

            GIT_TERMINAL_PROMPT="$1"
            export GIT_TERMINAL_PROMPT

            r_concat "${MULLE_FWD_FLAGS}" "$1"
            MULLE_FWD_FLAGS="${RVAL}"
         ;;

         --style)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            r_concat "${MULLE_ENV_FLAGS}" "$1"
            MULLE_ENV_FLAGS="${RVAL}"
            shift

            r_concat "${MULLE_ENV_FLAGS}" "$1"
            MULLE_ENV_FLAGS="${RVAL}"
            export MULLE_ENV_FLAGS
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -N|--search-nearest|--no-search)  # --no-search is historic
            r_concat "${MULLE_ENV_FLAGS}" "--search-nearest"
            MULLE_ENV_FLAGS="${RVAL}"
            export MULLE_ENV_FLAGS
         ;;

         --list-flags)
            (
               echo "\
--environment-override
--force
--git-terminal-prompt
--no-search
--no-test-check
--style
--version"
               options_technical_flags --list-technical-flags
            ) | sort
            exit 0
         ;;

         -D*)
            r_add_line "${MULLE_DEFINE_FLAGS}" "$1"
            MULLE_DEFINE_FLAGS="${RVAL}"

            r_add_line "${defines}" "$1"
            defines="${RVAL}"
         ;;

         -*)
            log_error "Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   if [ "${FLAG_OUTSIDE_ENV}" = 'YES' ]
   then
      MULLE_VIRTUAL_ROOT="`pwd -P`"
      [ "${MULLE_VIRTUAL_ROOT}" = "/" ] && fail "MULLE_VIRTUAL_ROOT can't be /"
      export MULLE_VIRTUAL_ROOT
   else
      #
      # a "convenient" ? shortcut to do projects w/o having to enter
      # a subshell. Starts a subshell every time though....
      #
      local cmd="$1"

      if [ -z "${MULLE_VIRTUAL_ROOT}" ]
      then
         # commands where we want to start a subshell
         case "${cmd}" in
            callback|clean|craft|craftinfo|craftorder|craftstatus|crun|doctor|\
dependency|definition|environment|fetch|files|find|library|linkorder|list|log|\
mark|match|monitor|patternfile|project|reflect|run|\
subproject|style|task|template|tool|treestatus|unmark|update)
               exec_command_in_subshell "$@"
            ;;

            install)
               # shellcheck source=src/mulle-sde-install.sh
               . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-install.sh"

               shift
               sde_install_main "$@"
               return $?
            ;;

            # commands that do not need a subshell (immediately)
            add|bash-completion|commands|extension|init|init-and-enter|reinit|\
status|hostname|uname|show|version|libexec-dir|library-path|project-dir|\
stash-dir|test|upgrade)
            ;;

            enter)
               shift
               MULLE_USAGE_NAME="mulle-sde" \
                  exec_mulle_env "$@"
            ;;

            "")
               # special treatment for empty, show usage
               if ! MULLE_USAGE_NAME="mulle-sde" \
                     exec_mulle_env -s
               then
                  log_warning "No mulle-sde project found"
                  usage
               fi
               exit 0
            ;;

            *)
               try_to_enter_or_download "$@"
            ;;
         esac
      else
         # commands where we cant be in the subshell
         case "${cmd}" in
            upgrade)
               fail "upgrade must run outside the subshell"
            ;;
         esac
      fi
   fi

   local cmd

   cmd="$1"
   [ $# -ne 0 ] && shift


   #
   # think about having a second MULLE_VIRTUAL_ROOT so that the project can
   # be read only and we keep the bookkeeping somewhere on the outside
   #

   eval `"${MULLE_ENV:-mulle-env}" --search-as-is mulle-tool-env sde` || exit 1

   if [ "${MULLE_FLAG_LOG_SETTINGS}" = 'YES' ]
   then
      log_trace2 "MULLE_VIRTUAL_ROOT=\"${MULLE_VIRTUAL_ROOT}\""
   fi

   if [ ! -z "${defines}" ]
   then
      set_custom_environment "${defines}"
   fi

   local hook
   local cmdidentifier

   # problem here is that cmdidentifier is not validate to be sane

   if [ "${BASH_VERSINFO[0]}" -ge 4 ]
   then
      cmdidentifier="${cmd^^}"
      cmdidentifier="${cmdidentifier//-/_}"

      hook="MULLE_SDE_${cmdidentifier}_PRELUDE"

      # run hook if environment variable is set
      eval "[ ! -z \"\${${hook}}\" ] && eval \"\${${hook}}\" >&2" >&2
   fi

   case "${cmd}" in
      add)
         # shellcheck source=src/mulle-sde-craft.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-add.sh"

         sde_add_main "$@"
      ;;

      bash-completion)
         printf "%s\n" "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-bash-completion.sh"
      ;;

      craftstatus)
         cd_virtual_root_assert_mulle_sde "${cmd}"

         assert_test_environment "${cmd}"

         # shellcheck source=src/mulle-sde-craft.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-craft.sh"
         sde_craftstatus_main "$@"
      ;;

      callback|task)
         cd_virtual_root_assert_mulle_sde "${cmd}"

         if [ "${PROJECT_TYPE}" = 'none' ]
         then
            fail "PROJECT_TYPE is 'none', nothing to ${cmd}"
         fi

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_MONITOR:-mulle-monitor}" \
                           ${MULLE_TECHNICAL_FLAGS} \
                        "${cmd}" \
                           "$@"
      ;;

      clean)
         cd_virtual_root_assert_mulle_sde "${cmd}"

         assert_test_environment "${cmd}"

         # shellcheck source=src/mulle-sde-clean.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-clean.sh"

         sde_clean_main "$@"
      ;;

      commands)
         echo "
add
bash-completion
craftorder
buildstatus
callback
clean
commands
craft
craftinfo
craftorder
crun
definition
dependency
environment
extension
fetch
files
find
init
init-and-enter
libexec-dir
library
library-path
linkorder
list
log
match
monitor
patternfile
project
project-dir
reinit
reflect
run
show
subproject
stash-dir
style
task
template
test
tool
treestatus
uname
update
upgrade
version"
         exit 0
      ;;

      craft)
         cd_virtual_root_assert_mulle_sde "${cmd}"

         assert_test_environment "${cmd}"

         # shellcheck source=src/mulle-sde-craft.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-craft.sh"
         sde_craft_main "$@"
      ;;

      crun)
         cd_virtual_root_assert_mulle_sde "${cmd}"

         assert_test_environment "${cmd}"

         # shellcheck source=src/mulle-sde-craft.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-craft.sh"
         sde_craft_main --run "$@"
      ;;

      craftinfo)
         cd_virtual_root_assert_mulle_sde "${cmd}"

         assert_test_environment "${cmd}"

         # shellcheck source=src/mulle-sde-craftinfo.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-craftinfo.sh"

         sde_dependency_craftinfo_main "$@"
      ;;

      craftorder)
         cd_virtual_root_assert_mulle_sde "${cmd}"

         assert_test_environment "${cmd}"

         # shellcheck source=src/mulle-sde-craftorder.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-craftorder.sh"

         sde_craftorder_main "$@"
      ;;

      definition)
         cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'

         if [ "${PROJECT_TYPE}" = 'none' ]
         then
            fail "PROJECT_TYPE is 'none', nothing to define"
         fi

         # shellcheck source=src/mulle-sde-definition.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-definition.sh"

         sde_definition_main "$@"
      ;;

      dependency)
         cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'

         # shellcheck source=src/mulle-sde-dependency.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-dependency.sh"

         sde_dependency_main "$@"
      ;;

      environment)
         cd_virtual_root "${cmd}" 'NO'

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exec_mulle_env -N "${cmd}" "$@"
      ;;

      extension)
         # shellcheck source=src/mulle-sde-extension.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-extension.sh"

         sde_extension_main "$@"
      ;;

      fetch)
         cd_virtual_root_assert_mulle_sde "${cmd}"

         # shellcheck source=src/mulle-sde-fetch.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-fetch.sh"

         sde_fetch_main "$@"
      ;;

      files)
         cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'

         # shellcheck source=src/mulle-sde-dependency.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-list.sh"

         sde_list_main --files "$@"
      ;;

      hostname)
         rexekutor printf "%s\n" "${MULLE_HOSTNAME}"
      ;;

      init)
         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh"

         unset MULLE_SDE_VAR_DIR
         unset MULLE_SDE_ETC_DIR
         unset MULLE_SDE_SHARE_DIR

         sde_init_main "$@"
      ;;

      init-and-enter)
         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh"

         # interactive shell, dont set usage
         sde_init_main --no-blurb "$@" && exec_mulle_env
      ;;

      library)
         cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'

         # shellcheck source=src/mulle-sde-library.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-library.sh"

         sde_library_main "$@"
      ;;

      libexec-dir|library-path)
         exekutor printf "%s\n" "${MULLE_SDE_LIBEXEC_DIR}"
      ;;

      linkorder)
         cd_virtual_root_assert_mulle_sde "${cmd}" 'NO' 'NO'

         assert_test_environment "${cmd}"

         # shellcheck source=src/mulle-sde-dependency.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-linkorder.sh"

         sde_linkorder_main "$@"
      ;;

      list)
         cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'

         # shellcheck source=src/mulle-sde-dependency.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-list.sh"

         sde_list_main "$@"
      ;;

      log)
         cd_virtual_root_assert_mulle_sde "${cmd}"

         assert_test_environment "${cmd}"

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_CRAFT:-mulle-craft}" \
                           ${MULLE_TECHNICAL_FLAGS} \
                        log \
                           "$@"
      ;;

      match|patternfile)
         cd_virtual_root "${cmd}" 'NO'

         if [ "${PROJECT_TYPE}" = 'none' ]
         then
            fail "PROJECT_TYPE is 'none', nothing to ${cmd}"
         fi

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_MATCH:-mulle-match}" \
                           ${MULLE_TECHNICAL_FLAGS} \
                        "${cmd}" \
                           "$@"
      ;;

      # convenient shortcuts
      mark|unmark)
         cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'

         # shellcheck source=src/mulle-sde-dependency.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-dependency.sh"

         sde_dependency_main "${cmd}" "$@"
      ;;


      '')
         log_warning "You are already in a virtual environment ($MULLE_VIRTUAL_ROOT)"
      ;;

      monitor)
         cd_virtual_root "${cmd}"

         if [ "${PROJECT_TYPE}" = 'none' ]
         then
            fail "PROJECT_TYPE is 'none', nothing to ${cmd}"
         fi

         # shellcheck source=src/mulle-sde-monitor.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-monitor.sh"

         sde_monitor_main "$@"
      ;;

      project)
         # shellcheck source=src/mulle-sde-project.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-project.sh"

         sde_project_main "$@"
      ;;

      project-dir)
         if r_determine_project_dir "${PWD}"
         then
            printf "%s\n" "${RVAL}"
         fi
      ;;

      reflect|update)
         # must allow NO for subenv updates
         cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'

         # shellcheck source=src/mulle-sde-reflect.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-reflect.sh"

         sde_reflect_main "$@"
      ;;

      #
      # reinit is used to change the project variables and then reinstall
      # project files with --allow-project to get proper identifiers in
      # your files
      #
      reinit)
         if [ "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
         then
            log_error "You must run ${C_RESET_BOLD}reinit${C_ERROR} with the -f flag, as it is destructive!"
#
# reinit -f clobbers! so demo and project are off by default
#
            log_info "  Additionally specify option --allow-project if you want to reinit project files"
            log_info "  Additionally specify option --allow-demo if you want to reinit demo files"
            exit 1
         fi

         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh"

         sde_init_main --reinit "$@"
      ;;

      run)
         local quote
         local args
         local arg

         quote="'"
         args=""
         for arg in "$@"
         do
            arg="${arg//${quote}/${quote}\"${quote}\"${quote}}"
            args="${args} '${arg}'"
         done

         unset quote
         unset arg

         eval_exekutor "${args}"
      ;;

      show)
         # shellcheck source=src/mulle-sde-extension.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-extension.sh"

         sde_extension_main show meta
      ;;

      stash-dir)
         exekutor "${MULLE_SOURCETREE:-mulle-sourcetree}" \
                        ${MULLE_TECHNICAL_FLAGS} \
                     stash-dir
      ;;

      status|doctor)
         # shellcheck source=src/mulle-sde-status.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-status.sh"

         sde_status_main "$@"
      ;;

      style)
         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
           exec_mulle_env -N "${cmd}" "$@"
      ;;

      subproject)
         cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'

         if [ "${PROJECT_TYPE}" = 'none' ]
         then
            fail "PROJECT_TYPE is 'none', no subprojects are possible"
         fi

         # shellcheck source=src/mulle-sde-subproject.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-subproject.sh"

         sde_subproject_main "$@"
      ;;

      template)
         cd_virtual_root "${cmd}"

         # shellcheck source=src/mulle-sde-template.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-template.sh"

         sde_template_main "$@"
      ;;

      test)
         if [ ! -z "${MULLE_VIRTUAL_ROOT}" ]
         then
            rexekutor cd "${MULLE_VIRTUAL_ROOT}" || fail "MULLE_VIRTUAL_ROOT \"${MULLE_VIRTUAL_ROOT}\" is missing"
         fi

         # shellcheck source=src/mulle-sde-test.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-test.sh"

         sde_test_main "$@"
      ;;

      treestatus)
         cd_virtual_root_assert_mulle_sde "${cmd}"

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_SOURCETREE:-mulle-sourcetree}" \
                           -V \
                           ${MULLE_TECHNICAL_FLAGS} \
                        status \
                           "$@"
      ;;

      tool)
         cd_virtual_root "${cmd}"

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
           exec_mulle_env -N "${cmd}" "$@"
      ;;

      uname)
         rexekutor printf "%s\n" "${MULLE_UNAME}"
      ;;

      upgrade)
         # shellcheck source=src/mulle-sde-upgrade.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-upgrade.sh"

         sde_upgrade_main "$@"
      ;;

      version)
         rexekutor printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      enter|install)
         fail "Command must be run from outside of the current environment."
      ;;

      *)
         if [ -d "${cmd}" ]
         then
            fail "To enter a different mulle-sde environment, you must first \
${C_RESET_BOLD}exit${C_ERROR} the current environment."
         fi
         log_error "Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac

   rval=$?
   if [ ! -z "${cmdidentifier}" ]
   then
      if [ $rval -eq 0 ]
      then
         hook="MULLE_SDE_${cmdidentifier}_OK"
      else
         hook="MULLE_SDE_${cmdidentifier}_FAIL"
      fi

      # run hook if environment variable is set
      eval "[ ! -z \"\${${hook}}\" ] && eval \"\${${hook}}\"" >&2
   fi

   return $rval
}


########
###
### INIT
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || \
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   r_get_libexec_dir "$0" "mulle-sde" "mulle-sde-craft.sh"
   MULLE_SDE_LIBEXEC_DIR="${RVAL}"

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         printf "%s\n" "${MULLE_SDE_LIBEXEC_DIR}"
         exit 0
      ;;
   esac

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   set -o pipefail
   shopt -s extglob
}
###
### INIT
###
########



_init "$@" # needs params

quote="'"
args=""
for arg in "$@"
do
   arg="${arg//${quote}/${quote}\"${quote}\"${quote}}"
   args="${args} '${arg}'"
done

unset quote
unset arg

eval main "${MULLE_SDE_FLAGS}" "${args}"
