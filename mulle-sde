#! /usr/bin/env mulle-bash
# shellcheck shell=bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_SDE_TRACE:-}" = 'YES' ] && set -x && : "$0" "$@"
[ "${MULLE_SDE_DUMP_ENV:-}" = 'YES' ] && env | sort >&2


MULLE_EXECUTABLE_VERSION=2.3.0
MULLE_EXECUTABLE_BASHFUNCTIONS="5.1"

#
# Determine location of own libexec directory. Which is `src` in development
# and ../libexec when deployed. MULLE_EXECUTABLE needs to be defined for this.
#

if ! [ ${MULLE_SDE_LIBEXEC_DIR+x} ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-sde" "mulle-sde-clean.sh"
   MULLE_SDE_LIBEXEC_DIR="${RVAL}"
fi

#
# This is the sde::main user interface to mulle-sde
# sorta like git
#
function sde::print_commands()
{
   local show_all="${1:-NO}"

   if [ -z "${MULLE_VIRTUAL_ROOT}" -a ! -d .mulle/etc/env ]
   then
      SHOWN_COMMANDS="\
   add            : create a source file from templates
   extension      : show available language and buildtool extensions
   init           : create a new project
   run            : run a command in a subshell
   show           : show available meta extensions
   status         : show information about the current directory"

      HIDDEN_COMMANDS="\
   bash-completion: get bash completion with \`. \$(mulle-sde bash-completion)\`
   environment    : manage environment variables (project settings)
   init-and-enter : create a new project then immediately start a subshell
   install        : install a remote mulle-sde project
   libexec-dir    : print path to mulle-sde libexec
   style          : manage environment style
   uname          : the simplified uname(1)"

   else
      SHOWN_COMMANDS="\
   add            : create a source file from templates
   clean          : clean various parts of the project
   craft          : craft the project using mulle-craft
   craftinfo      : show build flags of dependencies
   definition     : change projects craft options like CFLAGS
   dependency     : manage third party components (like GitHub projects)
   environment    : manage environment variables (project settings)
   ignore         : remove files from being crafted
   library        : manage second party (OS) libraries (like pthread)
   log            : show craft results
   list           : list project files (files matching patternfiles)
   reflect        : update project makefiles and sources
   status         : show information about the current project state
   view           : give an overview over the project settings"

      HIDDEN_COMMANDS="\
   cd             : change directory to dependency,kitchen et al.
   craftorder     : show craftorder of dependencies
   craftstatus    : show the craft status of the dependencies
   config         : show multiple sourcetree configurations
   donefile       : show contents of donefiles
   crun           : craft and run if project is an executable
   callback       : manage reflect callbacks
   env-identifier : get variable name "MULLE_UIOS" for a name like "MulleUIOS"
   extension      : show available language and buildtool extensions
   fetch          : fetch the sourcetree
   headerorder    : show header includes for dependencies and libraries
   init           : create a new project
   json           : show dependencies and libraries as JSON
   linkorder      : show linkorder of dependencies and libraries
   match          : experiment with patternfiles
   monitor        : monitor project files, run reflect and craft
   patternfile    : manage patternfiles
   product        : location of main executable or library, heuristic
   project-dir    : print project root directory
   project        : rename a project and its files
   searchpath     : show search path for build products
   source-dir     : print project source directory
   steal          : download and flatten source files from mulle-c projects
   subproject     : manage local subprojects
   task           : manage reflect tasks
   test           : run tests using mulle-test
   treestatus     : show the sourcetree status
   unveil         : produce sandbox CSV"
   fi

   printf "%s\n" "${SHOWN_COMMANDS}" | LC_ALL=C sort

   if [ "${show_all}" != 'NO' ]
   then
      printf "%s\n" "${HIDDEN_COMMANDS}" | LC_ALL=C sort
   fi
}


sde::print_flags()
{
   local verbose="${1:-NO}"

   local delm

   delm="          : "

   if [ "${verbose}" = 'YES' ]
   then
      echo "   -d <dir>       : change to dir before executing commands"
      echo "   -e             : bypass mulle-env check"
      echo "   -f             : force operation"
      echo "   -N             : do not search for enclosing environment"
   fi

      echo "   -DKEY=VALUE    : define one-time environment variable"

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      echo "   --style <val>  : see \`mulle-env help\` for style description"
   fi

   options_technical_flags_usage "${delm}"
}


sde::do_usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command] [options]

   The commandline IDE with the development cycle Edit -> Reflect -> Craft.

   * Edit     you use your preferred editors and file managers
   * Reflect  mulle-sde creates the necessary make files
   * Craft    mulle-sde builds the dependencies and the project

EOF
   if [ -z "${MULLE_VIRTUAL_ROOT}" -a ! -d .mulle ]
   then
      cat <<EOF
   Start a project with \`mulle-sde init\` or enter an existing mulle-sde
   project with \`mulle-sde <directory>\`. Download and craft dependencies
   or embed remote sources with \`mulle-sde add\`. Get more help with
   \`mulle-sde init help\` or  \`mulle-sde add help\`.

EOF
   else
      cat <<EOF
   Edit source files in '${PROJECT_SOURCE_DIR:-src}'. If you add, delete,
   rename or move source files run \`mulle-sde reflect\`. Use \`mulle-sde craft\`
   to craft your project. Add system libraries with \`mulle-sde library\` and
   other dependencies with \`mulle-sde dependency\`.

EOF
   fi

   cat <<EOF
   See the Wiki for more information:
      https://github.com/mulle-sde/mulle-sde/wiki

Flags:
EOF
   sde::print_flags "${verbose}" | LC_ALL=C sort

   cat <<EOF

Commands:
EOF

   sde::print_commands "${verbose}" | LC_ALL=C sort

   if [ "${verbose}" = 'NO' ]
   then
      cat <<EOF
      (use mulle-sde -v help to show more flags and commands)
EOF
   fi

   cat <<EOF

   Options are command specific. Use ${MULLE_USAGE_NAME} <command> -h for help.
EOF

   exit 1
}


sde::usage()
{
   sde::do_usage "$@" >&2
   exit 1
}


sde::set_custom_define()
{
   log_entry "sde::set_custom_define" "$@"

   local keyvalue="$1"

   local key
   local value

   key="${keyvalue%%=*}"

   if [ -z "${key}" ]
   then
      key="${keyvalue}"
   else
      value="${keyvalue#*=}"
   fi

   if [ "${key}" != "`printf "%q" "${key}"`" ]
   then
      fail "Invalid Environment key \"${key}\""
   fi

   eval "export ${key}=${value}"

   log_fluff "Set environment variable \"${key}\" to '${value}'"
}


sde::set_custom_environment()
{
   log_entry "sde::set_custom_environment" "$@"

   local defines="$1"

   local i

   .foreachline i in ${defines}
   .do
      sde::set_custom_define "${i#-D}"
   .done
}


sde::r_determine_project_dir()
{
   local directory="$1"

   RVAL="`( cd "${directory}" && sde::run_mulle_env --search-nearest project-dir )`"
}


sde::is_test_directory()
{
   log_entry "sde::is_test_directory" "$@"

   local directory="$1"

   r_filepath_concat "$1" ".mulle/share/test"
   directory="${RVAL}"

   log_debug "directory: ${directory} (${PWD#"${MULLE_USER_PWD}/"})"

   rexekutor [ -d "${directory}" ]
}


#
# why is this important ?
#
# mulle-sde craft will generate static libraries, but we want dynamic ones for
# tests, to keep test exes small.
#
# mulle-sde test craft will set the preference to --dynamic and possibly do
# some other settings as well.
#
sde::assert_test_environment()
{
   log_entry "sde::assert_test_environment" "$@"

   local cmd="${1:-craft}"

   if [ "${FLAG_TEST_CHECK}" = 'NO' ]
   then
      return
   fi

   if [ "${MULLE_TEST_ENVIRONMENT:-}" = 'YES' ]
   then
      if sde::is_test_directory "$PWD"
      then
         log_fluff "In test environment as expected"
         return
      fi
      if [ "${MULLE_FLAG_MAGNUM_FORCE}" = 'YES' ]
      then
         return
      fi
      fail "Not inside the test environment. Have you initialized it yet ?!?"
   else
      if ! sde::is_test_directory "$PWD"
      then
         log_debug "Not in a test environment"
         return
      fi
      if [ "${MULLE_FLAG_MAGNUM_FORCE}" = 'YES' ]
      then
         return
      fi
      fail "Use ${C_RESET_BOLD}mulle-sde test $cmd${C_ERROR} instead"
   fi
}


sde::run_mulle_env()
{
   log_entry "sde::run_mulle_env" "$@"

   #
   # possibly wrap mulle-env call into a sandbox (like a lljail script)
   #
   if [ ! -z "${MULLE_SDE_SANDBOX}" ]
   then
      rexekutor "${MULLE_SDE_SANDBOX}" ${MULLE_SDE_SANDBOX_FLAGS} \
                     "${MULLE_ENV:-mulle-env}" \
                        ${MULLE_TECHNICAL_FLAGS:-} \
                        ${MULLE_ENV_FLAGS:-} \
                        ${MULLE_FWD_FLAGS:-} \
                        --defines "${MULLE_DEFINE_FLAGS:-}" \
                        "$@"
      return $?
   fi

   rexekutor "${MULLE_ENV:-mulle-env}" \
                  ${MULLE_TECHNICAL_FLAGS:-} \
                  ${MULLE_ENV_FLAGS:-} \
                  ${MULLE_FWD_FLAGS:-} \
                  --defines "${MULLE_DEFINE_FLAGS:-}" \
                  "$@"
}


#
# execute a native mulle-env command, this is not expected to bounce back to
# mulle-sde
#
sde::exec_mulle_env()
{
   log_entry "sde::exec_mulle_env" "$@"

   #
   # possibly wrap mulle-env call into a sandbox (like lljail)
   #
   if [ ! -z "${MULLE_SDE_SANDBOX}" ]
   then
      rexekutor exec "${MULLE_SDE_SANDBOX}" ${MULLE_SDE_SANDBOX_FLAGS} \
                        "${MULLE_ENV:-mulle-env}" \
                            ${MULLE_TECHNICAL_FLAGS:-} \
                            ${MULLE_ENV_FLAGS:-} \
                            ${MULLE_FWD_FLAGS:-} \
                            --defines "${MULLE_DEFINE_FLAGS:-}" \
                            "$@"
      return $?
   fi

   rexekutor exec "${MULLE_ENV:-mulle-env}" \
                       ${MULLE_TECHNICAL_FLAGS:-} \
                       ${MULLE_ENV_FLAGS:-} \
                       ${MULLE_FWD_FLAGS:-} \
                       --defines "${MULLE_DEFINE_FLAGS:-}" \
                       "$@"
}


sde::exec_command_in_subshell()
{
   log_entry "sde::exec_command_in_subshell" "$@"

   local dir_action="$1" ; shift

   local current

   current="`pwd -P`"

   if ! sde::r_determine_project_dir "${current}"
   then
      if [ -d ".mulle-sde" ]
      then
         fail "There is only an old mulle-sde project in (${current#"${MULLE_USER_PWD}/"}).
${C_INFO}It should be upgradable with:
${C_RESET_BOLD}   mulle-sde upgrade
${C_RESET_BOLD}   mulle-sde clean tidy"
      fi
      fail "There is no mulle-sde project in (${current#"${MULLE_USER_PWD}/"}).
${C_INFO}Create an initial empty one with:
${C_RESET_BOLD}   mulle-sde init"
   fi

   if [ "${dir_action}" = 'CD' -a "${current}" != "${RVAL}" ]
   then
      [ -z "${MULLE_USER_PWD}" ] && _internal_fail "MULLE_USER_PWD not set"
      exekutor cd "${RVAL}" || exit 1
   fi

   # These flags are eventually passed to mulle-sde again, they aren't
   # picked up by MULLE_ENV
   #
   local flag
   local cmdline

   cmdline="${MULLE_EXECUTABLE}"

   shell_disable_glob # keep it
   for flag in ${MULLE_TECHNICAL_FLAGS:-} ${MULLE_FWD_FLAGS:-}
   do
      cmdline="${cmdline}
${flag}"
   done

   while [ $# -ne 0 ]
   do
      cmdline="${cmdline}
$1"
      shift
   done

   #
   # here we are just bouncing through mulle-env, we don't want
   # to pass -n, so mulle-env does nothing. Pushing MULLE_TECHNICAL_FLAGS
   # unfiltered isn't good. The technical flags will be part of the incoming
   # command line in "$@"
   #
   if [ ! -z "${MULLE_SDE_SANDBOX}" ]
   then
      MULLE_USAGE_NAME="mulle-sde" \
      rexekutor exec "${MULLE_SDE_SANDBOX}" ${MULLE_SDE_SANDBOX_FLAGS} \
                        "${MULLE_ENV:-mulle-env}" \
                           ${MULLE_ENV_FLAGS:-} \
                           ${MULLE_FWD_FLAGS:-} \
                           --defines "${MULLE_DEFINE_FLAGS:-}" \
                           -C "${cmdline}"
      return $?
   fi

   MULLE_USAGE_NAME="mulle-sde" \
      rexekutor exec "${MULLE_ENV:-mulle-env}" \
                        ${MULLE_ENV_FLAGS:-} \
                        ${MULLE_FWD_FLAGS:-} \
                        --defines "${MULLE_DEFINE_FLAGS:-}" \
                        -C "${cmdline}"
}


sde::cd_virtual_root()
{
   local cmd="$1"
   local subenvcheck="${2:-YES}"
   local subenvwarn="${3:-YES}"

   if [ "${subenvcheck}" = 'YES' ]
   then
      case "${MULLE_SHELL_MODE}" in
         *SUBENV*)
            fail "You can not run \`mulle-sde ${cmd}\` inside a sub-environment"
         ;;
      esac
   fi

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      fail "To run ${MULLE_EXECUTABLE_NAME} outside of mulle-env, pass the outside of mulle-env flag"
   fi

   log_debug "MULLE_VIRTUAL_ROOT: ${MULLE_VIRTUAL_ROOT}"

   local physdir

   physdir="`pwd -P`"

   #
   # this check can hit us, if we get a linkorder request in cmake for example
   # but we don't really want to warn then. subenvwarn is a hack
   # to suppress this.
   #
   log_debug "PWD:                ${physdir}"

   if [ "${physdir}" != "${MULLE_VIRTUAL_ROOT}" ]
   then
      #
      # quick check that we are not passing a "mulle-env" boundary
      #
      if [ -d "${physdir}/.mulle/share/env" ]
      then
         if [ "${subenvwarn}" = 'YES' ]
         then
            _log_warning "${MULLE_EXECUTABLE} ${HACKY_ARGS}: \
warning \"${MULLE_VIRTUAL_ROOT}\" is virtual root, but we are in a subshell \
already ($physdir)"
         fi
      else
         physdir="${MULLE_VIRTUAL_ROOT}"
      fi
   fi

   # ensure that we are in physical
   if [ "${physdir}" != "${PWD}" ]
   then
      rexekutor cd "${physdir}" \
      || fail "could not enter physical virtual root (${MULLE_VIRTUAL_ROOT})"
   fi

   # set MULLE_VIRTUAL_ROOT to physical (can have changed above intermittently)
   MULLE_VIRTUAL_ROOT="${PWD}"
}


sde::cd_virtual_root_assert_mulle_sde()
{
   sde::cd_virtual_root "$@"

   if [ "${FLAG_OUTSIDE_ENV}" = "YES" ]
   then
      return
   fi

   [ ! -d "${MULLE_SDE_SHARE_DIR}" ] \
   && fail "There is no ${MULLE_SDE_SHARE_DIR} here"
}


sde::try_to_enter_or_download()
{
   local dst="$1"

   if [ $# -eq 1 ]
   then
      case "$1" in
         *://*)
            dst="`exekutor "${MULLE_FETCH:-mulle-fetch}" \
                              ${MULLE_TECHNICAL_FLAGS} \
                              ${MULLE_FETCH_FLAGS} \
                              convenient-fetch "$@"`" || exit 1
            if [ -d "${dst}/.mulle" ]
            then
               MULLE_USAGE_NAME="mulle-sde" \
               sde::exec_mulle_env "${dst}"
            fi

            # just warn, but quit anyway
            log_warning "\"${dst#"${MULLE_USER_PWD}/"}\" is not a mulle-sde project"
            exit 1
         ;;

         *)
            if [ -d "$1" ]
            then
               MULLE_USAGE_NAME="mulle-sde" \
                  sde::exec_mulle_env "$@"
            fi
         ;;
        esac
   fi

   log_error "Unknown command \"${cmd}\""
   sde::usage "${MULLE_TRACE}"
}


sde::is_non_environment_commandline()
{
   while [ $# -ne 0 ]
   do
      case "$1" in
         -h|--help|help)
            return 0
         ;;

         --)
            break
         ;;

      esac
      shift
   done

   return 1
}


sde::main()
{
   local FLAG_TEST_CHECK="${MULLE_SDE_TEST_CHECK:-YES}"
   local FLAG_OUTSIDE_ENV='NO'

   local defines

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            sde::usage "${MULLE_TRACE}"
         ;;

         -e|--environment-override)
            FLAG_OUTSIDE_ENV='YES'
         ;;

         --test-check)
            FLAG_TEST_CHECK='YES'
         ;;

         --no-test-check)
            FLAG_TEST_CHECK='NO'
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
            r_concat "${MULLE_FWD_FLAGS}" "$1"
            MULLE_FWD_FLAGS="${RVAL}"
         ;;

         -c|-C)
            sde::exec_mulle_env "$@"
         ;;
                 # this has never been used really so far
         --git-terminal-prompt)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""

            r_concat "${MULLE_FWD_FLAGS}" "$1"
            MULLE_FWD_FLAGS="${RVAL}"
            shift

            GIT_TERMINAL_PROMPT="$1"
            export GIT_TERMINAL_PROMPT

            r_concat "${MULLE_FWD_FLAGS}" "$1"
            MULLE_FWD_FLAGS="${RVAL}"
         ;;

         --style)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            r_concat "${MULLE_ENV_FLAGS}" "$1"
            MULLE_ENV_FLAGS="${RVAL}"
            shift

            r_concat "${MULLE_ENV_FLAGS}" "$1"
            MULLE_ENV_FLAGS="${RVAL}"
            export MULLE_ENV_FLAGS
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -N|--search-nearest|--no-search)  # --no-search is historic
            r_concat "${MULLE_ENV_FLAGS}" "--search-nearest"
            MULLE_ENV_FLAGS="${RVAL}"
            export MULLE_ENV_FLAGS
         ;;

         --search-as-is|--search-here|--search-none)  # --no-search is historic
            r_concat "${MULLE_ENV_FLAGS}" "$1"
            MULLE_ENV_FLAGS="${RVAL}"
            export MULLE_ENV_FLAGS
         ;;

         --list-flags)
            (
               echo "\
--environment-override
--force
--git-terminal-prompt
--no-search
--no-test-check
--style
--version"
               options_technical_flags --list-technical-flags
            ) | sort
            exit 0
         ;;

         -D*)
            r_add_line "${MULLE_DEFINE_FLAGS}" "$1"
            MULLE_DEFINE_FLAGS="${RVAL}"

            r_add_line "${defines}" "$1"
            defines="${RVAL}"
         ;;

         -d)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift
            exekutor cd "$1" || exit 1
         ;;

         -*)
            log_error "Unknown option \"$1\""
            sde::usage "${MULLE_TRACE:-}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE:-}" && set -x

   local cmd

   if [ "${FLAG_OUTSIDE_ENV}" = 'YES' ]
   then
      MULLE_VIRTUAL_ROOT="`pwd -P`"
      [ "${MULLE_VIRTUAL_ROOT}" = "/" ] && fail "MULLE_VIRTUAL_ROOT can't be /"
      export MULLE_VIRTUAL_ROOT
   else
      #
      # a "convenient" ? shortcut to do projects w/o having to enter
      # a subshell. Starts a subshell every time though....
      #
      cmd="$1"

      if [ -z "${MULLE_VIRTUAL_ROOT:-}" ]
      then
         case "${cmd}" in
            # commands that do not need a subshell (immediately)
            add|bash-completion|commands|env|environment|env-identifier|\
extension|get|init|init-and-enter|install|reinit|status|hostname|remove|uname|\
show|version|libexec-dir|library-path|project-dir|set|source-dir|steal|test|upgrade|username)
            ;;

            # commands where we want to start a subshell and these don't have
            # any help text
            addiction-dir|craftorder-kitchen-dir|dependency-dir|kitchen-dir|tool-env|stash-dir)
               sde::exec_command_in_subshell 'CD' "$@"
            ;;

            #
            # commands that execute in the user PWD
            #
            run)
               if ! sde::is_non_environment_commandline "$@"
               then
                  sde::exec_command_in_subshell 'STAY' "$@"
               fi
            ;;

            #
            # commands that have a help text, we want to show this even
            # if there is no environment around
            #
            callback|clean|config|craft|craftinfo|craftorder|craftstatus|\
craft-status|definition|dep|dependency|doctor|donefile|fetch|\
files|filename|find|headerorder|ignore|json|library|linkorder|list|log|\
mark|match|migrate|monitor|move|\
patterncheck|patternenv|patternfile|patternfiles|\
product|project|protect|reflect|searchpath|sourcetree|subproject|style|\
task|tool|treestatus|unmark|unprotect|update|\
ext|lib|pat|sub|unveil|view)
               if ! sde::is_non_environment_commandline "$@"
               then
                  sde::exec_command_in_subshell 'CD' "$@"
               fi
            ;;

            _install)
               # shellcheck source=src/mulle-sde-install.sh
               . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-install.sh"

               shift
               sde::install::main "$@"
               return $?
            ;;

            enter)
               shift
               MULLE_USAGE_NAME="mulle-sde" \
                  sde::exec_mulle_env "$@"
            ;;

            "")
               # special treatment for empty, show sde::usage
               if ! MULLE_USAGE_NAME="mulle-sde" \
                     sde::exec_mulle_env -s
               then
                  log_warning "No mulle-sde project found"
                  sde::usage
               fi
               exit 0
            ;;

            *)
               sde::try_to_enter_or_download "$@"
            ;;
         esac
      else
         # commands where we cant be in the subshell
         case "${cmd}" in
            upgrade)
               fail "upgrade must run outside the subshell"
            ;;
         esac
      fi
   fi

   cmd="$1"
   [ $# -ne 0 ] && shift

   #
   # think about having a second MULLE_VIRTUAL_ROOT so that the project can
   # be read only and we keep the bookkeeping somewhere on the outside
   #
   log_setting "MULLE_VIRTUAL_ROOT=\"${MULLE_VIRTUAL_ROOT}\""
   log_setting "MULLE_TECHNICAL_FLAGS=\"${MULLE_TECHNICAL_FLAGS}\""

   if ! sde::is_non_environment_commandline "$@"
   then
      if ! eval `"${MULLE_ENV:-mulle-env}" --search-as-is mulle-tool-env sde`
      then
         if [ "${FLAG_OUTSIDE_ENV}" != "YES" ]
         then
            return 1
         fi
         # assume user knows what hes doing
      else
         if [ -z "${MULLE_SDE_VAR_DIR}" ]
         then
            if [ -z "`pwd -P`" ]
            then
               fail "The working directory ${PWD} has been deleted"
            else
               fail "Mysteriously failed to acquire tool environment"
            fi
         fi

         if [ ! -z "${defines:-}" ]
         then
            sde::set_custom_environment "${defines}"
         fi

         local hook
         local cmdidentifier
         local value

         # problem here is that cmdidentifier is not validate to be sane

         if [ "${BASH_VERSINFO[0]}" -ge 4 ]
         then
            cmdidentifier="${cmd^^}"
            cmdidentifier="${cmdidentifier//-/_}"

            hook="MULLE_SDE_${cmdidentifier}_PRELUDE"

            # run hook if environment variable is set
            r_shell_indirect_expand "${hook}"
            value="${RVAL}"

            if [ ! -z "${value}" ]
            then
               "${value}" >&2
            fi
         fi
      fi
   fi

   case "${cmd}" in
      add)
         # shellcheck source=src/mulle-sde-add.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-add.sh" || exit 1

         sde::add::main "$@"
      ;;

      addiction-dir|craftorder-kitchen-dir|dependency-dir|kitchen-dir)
         exekutor "${MULLE_CRAFT:-mulle-craft}" \
                        ${MULLE_TECHNICAL_FLAGS} \
                     "${cmd}"
      ;;

      bash-completion)
         log_warning "bash completion no longer supported"
      ;;

      callback|task)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"

            if [ "${PROJECT_TYPE}" = 'none' -a "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
            then
               fail "PROJECT_TYPE is 'none', nothing to ${cmd}"
            fi
         fi

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_MONITOR:-mulle-monitor}" \
                           ${MULLE_TECHNICAL_FLAGS} \
                        "${cmd}" \
                           "$@"
      ;;

      clean)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"
            sde::assert_test_environment "${cmd}"
         fi

         # shellcheck source=src/mulle-sde-clean.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-clean.sh" || exit 1

         sde::clean::main "$@"
      ;;

      commands)
         echo "
add
addiction-dir
bash-completion
craftorder
buildstatus
callback
clean
commands
config
craft
craftinfo
craftorder
crun
definition
dependency
dependency-dir
environment
extension
fetch
filename
files
find
get
headerorder
ignore
init
init-and-enter
install
json
kitchen-dir
libexec-dir
library
library-path
linkorder
list
log
match
monitor
move
patterncheck
patternfile
patternenv
product
project
project-dir
protect
reinit
reflect
remove
run
searchpath
set
show
source-dir
sourcetree
subproject
stash-dir
steal
style
task
test
tool
treestatus
uname
unprotect
unveil
update
upgrade
versions
view"
         exit 0
      ;;

      config|sourcetree)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"

            sde::assert_test_environment "${cmd}"
         fi
         # shellcheck source=src/mulle-sde-config.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-config.sh" || exit 1
         sde::config::main "$@"
      ;;

      craft)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"

            sde::assert_test_environment "${cmd}"
         fi

         # shellcheck source=src/mulle-sde-craft.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-craft.sh" || exit 1
         sde::craft::main "$@"
      ;;

      craftinfo|craftinfos)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"

            sde::assert_test_environment "${cmd}"
         fi

         # shellcheck source=src/mulle-sde-craftinfo.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-craftinfo.sh" || exit 1

         sde::craftinfo::main "$@"
      ;;

      craftorder|craftorders)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"

            sde::assert_test_environment "${cmd}"
         fi


         # shellcheck source=src/mulle-sde-craftorder.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-craftorder.sh" || exit 1

         sde::craftorder::main "$@"
      ;;

      craftstatus|craft-status)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"

            sde::assert_test_environment "${cmd}"
         fi

         # shellcheck source=src/mulle-sde-craft.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-craft.sh"
         sde::craft::craftstatus_main "$@"
      ;;

      crun)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"

            sde::assert_test_environment "${cmd}"
         fi

         # shellcheck source=src/mulle-sde-craft.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-craft.sh" || exit 1
         sde::craft::main --run "$@"
      ;;

      definition|definitions|def)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"

            if [ "${PROJECT_TYPE}" = 'none' -a "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
            then
               fail "PROJECT_TYPE is 'none', nothing to define"
            fi
         fi

         # shellcheck source=src/mulle-sde-definition.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-definition.sh" || exit 1

         sde::definition::main "$@"
      ;;

      dependency|dep)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'
         fi

         # shellcheck source=src/mulle-sde-dependency.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-dependency.sh" || exit 1

         sde::dependency::main "$@"
      ;;

      donefile|donefiles)
         exekutor "${MULLE_CRAFT:-mulle-craft}" \
                        ${MULLE_TECHNICAL_FLAGS} \
                     "${cmd}" "$@"
      ;;

      enter)
         fail "Command must be run from outside of the current environment."
      ;;

      environment|env)
         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            sde::exec_mulle_env -N \
                                "environment" \
                                "$@"
#         if ! sde::is_non_environment_commandline "$@"
#         then
#            sde::cd_virtual_root "environment" 'NO'
#         fi
#
#         # shellcheck source=src/mulle-sde-environment.sh
#         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-environment.sh" || exit 1
#
#         sde::environment::main "$@"
      ;;


      env-identifier)
         include "case"

         [ -z "$1" ] && fail "Specify desired project name for env-identifier"
         r_smart_file_upcase_identifier "$1"

         rexekutor printf "%s\n" "${RVAL}"
      ;;

      extension|extensions|ext)
         # shellcheck source=src/mulle-sde-extension.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-extension.sh" || exit 1

         sde::extension::main "$@"
      ;;

      fetch)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"
         fi
         # shellcheck source=src/mulle-sde-fetch.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-fetch.sh" || exit 1

         sde::fetch::main "$@"
      ;;

      files)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'
         fi
         # shellcheck source=src/mulle-sde-list.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-list.sh" || exit 1

         sde::list::main --files "$@"
      ;;

      'get'|'set')
         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            sde::exec_mulle_env -N \
                                "environment" \
                                "${cmd}" "$@"
         exekutor "${MULLE_ENV:-mulle-env}" \
                        ${MULLE_TECHNICAL_FLAGS} \
                     "${cmd}" "$@"
      ;;

      headerorder)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO' 'NO'

            sde::assert_test_environment "${cmd}"
         fi
         # shellcheck source=src/mulle-sde-headerorder.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-headerorder.sh" || exit 1

         sde::headerorder::main "$@"
      ;;

      hostname)
         rexekutor printf "%s\n" "${MULLE_HOSTNAME}"
      ;;

      ignore)
         # shellcheck source=src/mulle-sde-ignore.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-ignore.sh" || exit 1

         sde::ignore::main "$@"
      ;;

      init)
         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh" || exit 1

         unset MULLE_SDE_VAR_DIR
         unset MULLE_SDE_ETC_DIR
         unset MULLE_SDE_SHARE_DIR

         sde::init::main "$@"
      ;;

      init-and-enter)
         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh" || exit 1

         # interactive shell, dont set sde::usage
         sde::init::main --no-blurb "$@" && sde::exec_mulle_env
      ;;


      install)
         # invoke ourselves with a clean environment so that we
         # don't accidentally inherit something from the current
         # environment. If you use -n, it won't work. This is not a "bounce"
         # though
         sde::exec_mulle_env invoke "${MULLE_EXECUTABLE}" \
                               ${MULLE_TECHNICAL_FLAGS} \
                               ${MULLE_FWD_FLAGS} \
                           _install \
                                 "$@"
         return $?
      ;;

      json)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'
         fi

         exekutor "${MULLE_SOURCETREE:-mulle-sourcetree}" \
                        ${MULLE_TECHNICAL_FLAGS} \
                     "json" "$@"
      ;;

      library|libraries|lib)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'
         fi
         # shellcheck source=src/mulle-sde-library.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-library.sh" || exit 1

         sde::library::main "$@"
      ;;

      libexec-dir|library-path)
         exekutor printf "%s\n" "${MULLE_SDE_LIBEXEC_DIR}"
      ;;

      linkorder)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO' 'NO'

            sde::assert_test_environment "${cmd}"
         fi
         # shellcheck source=src/mulle-sde-linkorder.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-linkorder.sh" || exit 1

         sde::linkorder::main "$@"
      ;;

      list)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'
         fi
         # shellcheck source=src/mulle-sde-list.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-list.sh" || exit 1

         sde::list::main "$@"
      ;;

      log)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO' 'NO'

            sde::assert_test_environment "${cmd}"
         fi

         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_CRAFT:-mulle-craft}" \
                           ${MULLE_TECHNICAL_FLAGS} \
                        log \
                           "$@"
      ;;

      match)
         # shellcheck source=src/mulle-sde-match.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-match.sh" || exit 1

         sde::match::main "$@"
      ;;

      move)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'
         fi

         # shellcheck source=src/mulle-sde-dependency.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-dependency.sh" || exit 1

         sde::dependency::main "${cmd}" "$@"
      ;;

      # convenient shortcuts
      mark|unmark)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'

            # shellcheck source=src/mulle-sde-dependency.sh
            . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-dependency.sh" || exit 1
         fi
         sde::dependency::main "${cmd}" "$@"
      ;;


      '')
         log_warning "You are already in a virtual environment ($MULLE_VIRTUAL_ROOT)"
      ;;

      migrate)
         _log_warning "Command only to be used for development of mulle-sde"

         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'
         fi
         # shellcheck source=src/mulle-sde-migrate.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-migrate.sh" || exit 1

         sde::migrate::main "$@"
      ;;

      monitor)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root "${cmd}"

            if [ "${PROJECT_TYPE}" = 'none' -a "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
            then
               fail "PROJECT_TYPE is 'none', nothing to ${cmd}"
            fi
         fi

         # shellcheck source=src/mulle-sde-monitor.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-monitor.sh" || exit 1

         sde::monitor::main "$@"
      ;;

      patterncheck|patternenv|patternfile|pat|patternfiles|filename|patternmatch)
         cmd="${cmd//patternfiles/patternfile}"

         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root "${cmd}" 'NO'

            if [ "${PROJECT_TYPE}" = 'none' -a "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
            then
               fail "PROJECT_TYPE is 'none', nothing to ${cmd}"
            fi
         fi

         # shellcheck source=src/mulle-sde-patternfile.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-patternfile.sh" || exit 1


         sde::patternfile::main "${cmd}" "$@"
      ;;

      product)
         # shellcheck source=src/mulle-sde-product.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-product.sh" || exit 1

         sde::product::main "$@"
      ;;

      project)
         # shellcheck source=src/mulle-sde-project.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-project.sh" || exit 1

         sde::project::main "$@"
      ;;

      project-dir)
         if ! sde::r_determine_project_dir "${PWD}"
         then
            return 1
         fi
         printf "%s\n" "${RVAL}"
      ;;

      protect)
         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh" || exit 1

         sde::init::protect_unprotect "Protect" "a-w"
      ;;

      reflect|update)
         if ! sde::is_non_environment_commandline "$@"
         then
            # must allow NO for subenv updates
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'
         fi
         # shellcheck source=src/mulle-sde-reflect.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-reflect.sh" || exit 1

         sde::reflect::main "$@"
      ;;

      #
      # reinit is used to change the project variables and then reinstall
      # project files with --allow-project to get proper identifiers in
      # your files
      #
      reinit)
         if [ "${MULLE_FLAG_MAGNUM_FORCE}" != 'YES' ]
         then
            log_error "You must run ${C_RESET_BOLD}reinit${C_ERROR} with the -f flag, as it is destructive!"
#
# reinit -f clobbers! so demo and project are off by default
#
            log_info "  Additionally specify option --allow-project if you want to reinit project files"
            log_info "  Additionally specify option --allow-demo if you want to reinit demo files"
            exit 1
         fi

         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh" || exit 1

         sde::init::main --reinit "$@"
      ;;

      remove)
         # shellcheck source=src/mulle-sde-remove.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-remove.sh" || exit 1

         sde::remove::main "$@"
      ;;

      run)
         local quote
         local args
         local arg

         quote="'"
         args=""
         for arg in "$@"
         do
            arg="${arg//${quote}/${quote}\"${quote}\"${quote}}"
            args="${args} '${arg}'"
         done

         unset quote
         unset arg

         eval_exekutor "${args}"
      ;;


      searchpath)
         exekutor "${MULLE_CRAFT:-mulle-craft}" \
                        ${MULLE_TECHNICAL_FLAGS} \
                     searchpath "$@"
      ;;


      show)
         # shellcheck source=src/mulle-sde-extension.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-extension.sh" || exit 1

         if [ $# -ne 0 ]
         then
            sde::extension::main show "$@"
         else
            sde::extension::main show meta
         fi
      ;;

      source-dir)
         local directory
         local subdir

         if ! sde::r_determine_project_dir "${PWD}"
         then
            return 1
         fi

         directory="${RVAL}"
         subdir="`sde::run_mulle_env environment get PROJECT_SOURCE_DIR`"

         r_filepath_concat "${directory}" "${subdir}"
         printf "%s\n" "${RVAL}"
      ;;

      stash-dir)
         exekutor "${MULLE_SOURCETREE:-mulle-sourcetree}" \
                        ${MULLE_TECHNICAL_FLAGS} \
                     stash-dir
      ;;

      status|doctor)
         # shellcheck source=src/mulle-sde-status.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-status.sh" || exit 1

         sde::status::main "$@"
      ;;

      steal)
         # shellcheck source=src/mulle-sde-steal.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-steal.sh" || exit 1

         sde::steal::main "$@"
      ;;

      style)
         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
           sde::exec_mulle_env -N "${cmd}" "$@"
      ;;

      subproject|subprojects|sub)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}" 'NO'

            if [ "${PROJECT_TYPE}" = 'none' ]
            then
               fail "PROJECT_TYPE is 'none', no subprojects are possible"
            fi
         fi

         # shellcheck source=src/mulle-sde-subproject.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-subproject.sh" || exit 1

         sde::subproject::main "$@"
      ;;

      test)
         if ! sde::is_non_environment_commandline "$@"
         then
            if [ ! -z "${MULLE_VIRTUAL_ROOT}" ]
            then
               rexekutor cd "${MULLE_VIRTUAL_ROOT}" \
               || fail "MULLE_VIRTUAL_ROOT \"${MULLE_VIRTUAL_ROOT}\" is missing"
            fi
         fi

         # shellcheck source=src/mulle-sde-test.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-test.sh" || exit 1

         sde::test::main "$@"
      ;;

      tool)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root "${cmd}"
         fi
         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
           sde::exec_mulle_env -N "${cmd}" "$@"
      ;;


      tool-env)
         (
            exekutor "${MULLE_CRAFT:-mulle-craft}" \
                           ${MULLE_TECHNICAL_FLAGS} \
                        "tool-env"
            exekutor "${MULLE_SOURCETREE:-mulle-sourcetree}" \
                           ${MULLE_TECHNICAL_FLAGS} \
                        "tool-env"
         ) | sort
      ;;

      treestatus)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root_assert_mulle_sde "${cmd}"
         fi
         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_SOURCETREE:-mulle-sourcetree}" \
                           --virtual-root \
                           ${MULLE_TECHNICAL_FLAGS} \
                        status \
                           "$@"
      ;;

      uname)
         rexekutor printf "%s\n" "${MULLE_UNAME}"
      ;;

      unprotect)
         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh" || exit 1

         sde::init::protect_unprotect "Unprotect" "ug+w"
      ;;

      unveil)
         if ! sde::is_non_environment_commandline "$@"
         then
            sde::cd_virtual_root "environment" 'NO'
         fi

         # shellcheck source=src/mulle-sde-unveil.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-unveil.sh" || exit 1

         sde::unveil::main "$@"
      ;;

      upgrade)
         # shellcheck source=src/mulle-sde-upgrade.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-upgrade.sh" || exit 1

         sde::upgrade::main "$@"
      ;;

      username)
         rexekutor printf "%s\n" "${MULLE_USERNAME}"
      ;;

      version)
         rexekutor printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;


      view)
         log_info "${C_BR_BLUE}${C_BOLD}Environment"
         mulle-sde -s env list --output-eval \
         | GREP_COLOR=none grep -E '^MULLE_SOURCETREE_CONFIG|^MULLE_CRAFT_|FLAGS=' \
         | sed -e 's/^/   /'
         echo
         echo
         log_info "${C_BR_BLUE}${C_BOLD}Definition"
         mulle-sde definition
         echo
         echo
         log_info "${C_BR_BLUE}${C_BOLD}Dependency"
         mulle-sde dependency list -- -f "%a\n" --no-output-header \
         | sort \
         | sed -e 's/^/   /'
         echo
         echo
         log_info "${C_BR_BLUE}${C_BOLD}Library"
         mulle-sde library list -- -f "%a\n" --no-output-header \
         | sort \
         | sed -e 's/^/   /'
         echo
         echo
         log_info "${C_BR_BLUE}${C_BOLD}Craftinfo"
         mulle-sde craftinfo
         echo
      ;;

      *)
         if [ -d "${cmd}" ]
         then
            fail "To enter a different mulle-sde environment, you must first \
${C_RESET_BOLD}exit${C_ERROR} the current environment."
         fi
         log_error "Unknown command \"${cmd}\""
         sde::usage "${MULLE_TRACE}"
      ;;
   esac

   rval=$?
   if [ ! -z "${cmdidentifier}" ]
   then
      if [ $rval -eq 0 ]
      then
         hook="MULLE_SDE_${cmdidentifier}_OK"
      else
         hook="MULLE_SDE_${cmdidentifier}_FAIL"
      fi

      # run hook if environment variable is set
      eval "[ ! -z \"\${${hook}}\" ] && eval \"\${${hook}}\"" >&2
   fi

   return $rval
}

HACKY_ARGS="$*"
call_with_flags "sde::main" "${MULLE_SDE_FLAGS:-}" "$@"
