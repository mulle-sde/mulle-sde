#! /usr/bin/env bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION=0.7.0
MULLE_EXECUTABLE_BASHFUNCTIONS="1"


#
# This is the main user interface to mulle-sde
# sorta like git
#

trap_fail()
{
   exit 1
}


SHOWN_COMMANDS="\
   build         : build the project using mulle-craft
   dependencies  : manage third party components (like a Github project)
   extensions    : show available language and buildtool extensions
   init          : create a new project
   libraries     : manage OS libraries (like pthread)
   monitor       : monitor project files, run updates and build
   subprojects   : manage local subprojects
   update        : run only updates, once"


HIDDEN_COMMANDS="\
   libexec-dir   : print path to mulle-sde libexec
   remove        : remove a a dependency, library
   uname         : mulle-sdes simplified uname(1)"


print_commands()
{
   local show_all="${1:-NO}"

   echo "${SHOWN_COMMANDS}"

   if [ "${show_all}" != "NO" ]
   then
      echo "${HIDDEN_COMMANDS}"
   fi
}


print_flags()
{
   local delimiter

   delimiter="         : "

   echo "   -e   ${delimiter}bypass mulle-env check"
   echo "   -f   ${delimiter}force operation"

   options_technical_flags_usage "${delimiter}"
}


_usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_EXECUTABLE_NAME} [flags] [command] [options]

   The commandline IDE.

Flags:
EOF
   print_flags  | sort


   cat <<EOF

Commands:
EOF

   print_commands "${verbose}" | sort

   if [ "${verbose}" = "NO" ]
   then
      cat <<EOF
      (use mulle-sde -v help to show more commands)
EOF
   fi

   cat <<EOF

   Options are command specific. Use ${MULLE_EXECUTABLE_NAME} <command> -h for help.
EOF

   exit 1
}


usage()
{
   _usage "$@" >&2
   exit 1
}

#
# stolen from:
# http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
# ----
#
_prepend_path_if_relative()
{
   case "$2" in
      /*)
         echo "$2"
      ;;
      *)
         echo "$1/$2"
      ;;
   esac
}


resolve_symlinks()
{
   local dir_context
   local linkpath

   if linkpath="`readlink "$1"`"
   then
      dir_context=`dirname -- "$1"`
      resolve_symlinks "`_prepend_path_if_relative "${dir_context}" "${linkpath}"`"
   else
      echo "$1"
   fi
}


sde_libexec_path()
{
   local executablepath="$1"

   local exedir
   local exedirpath
   local prefix
   local libexecpath

   case "${executablepath}" in
      \.*|/*|~*)
      ;;

      *)
         executablepath="`command -v "${executablepath}"`"
      ;;
   esac

   executablepath="`resolve_symlinks "${executablepath}"`"
   exedirpath="`dirname "${executablepath}"`"
   prefix="`dirname "${exedirpath}"`"
   libexecpath="${prefix}/libexec/mulle-sde"

   if [ ! -x "${libexecpath}/mulle-sde-monitor.sh" ]
   then
      libexecpath="${exedirpath}/src"
   fi

   case "$libexecpath" in
      /*|~*)
      ;;

      *)
         libexecpath="$PWD/$libexecpath"
      ;;
   esac

   if [ -x "${libexecpath}/mulle-sde-monitor.sh" ]
   then
      echo "${libexecpath}"
   fi
}


_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   MULLE_SDE_LIBEXEC_DIR="`sde_libexec_path "$0"`"
   if [ -z "${MULLE_SDE_LIBEXEC_DIR}" ]
   then
      echo "$0 fatal error: Could not find libexec ($PWD)" >&2
      exit 1
   fi

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         echo "${MULLE_SDE_LIBEXEC_DIR}"
         exit 0
      ;;
   esac

   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env library-path 2> /dev/null`"
   [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
      echo "mulle-bashfunctions-env not installed" >&2 && \
      exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NO"

   # technical flags
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -e)
            FLAG_OUTSIDE_ENV="YES"
            MULLE_CRAFT_FLAGS="`concat "${MULLE_CRAFT_FLAGS}" "$1" `"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="YES"
            MULLE_CRAFT_FLAGS="`concat "${MULLE_CRAFT_FLAGS}" "$1" `"
         ;;

         -h|--help)
            usage "${MULLE_TRACE}"
         ;;

         --git-terminal-prompt)
            [ $# -eq 1 ] && fail "missing argument to \"$1\""
            MULLE_CRAFT_FLAGS="`concat "${MULLE_CRAFT_FLAGS}" "$1" `"
            shift

            GIT_TERMINAL_PROMPT="$1"
            export GIT_TERMINAL_PROMPT

            MULLE_CRAFT_FLAGS="`concat "${MULLE_CRAFT_FLAGS}" "$1" `"
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local cmd

   cmd="$1"
   [ $# -ne 0 ] && shift

   MULLE_EXECUTABLE_FAIL_PREFIX="`concat "${MULLE_EXECUTABLE_NAME}" "${cmd}" `"

   if [ "${FLAG_OUTSIDE_ENV}" = "YES" ]
   then
      MULLE_VIRTUAL_ROOT="${PWD}"
      export MULLE_VIRTUAL_ROOT
   fi

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      case "${cmd}" in
         all|build|clean|onlydependencies|nodependencies|project|sourcetree)
            fail "To run ${MULLE_EXECUTABLE_NAME} outside of mulle-env, pass the -e flag"
         ;;
         dependencies|extensions|libraries|monitor|subprojects|minions|tools|update)
            fail "To run ${MULLE_EXECUTABLE_NAME} outside of mulle-env, pass the -e flag"
         ;;
         esac
   fi

   MULLE_SDE_DIR="${MULLE_VIRTUAL_ROOT}/.mulle-sde"

   MULLE_EXECUTABLE_OPTIONS="$@"

   case "${cmd}" in
      #
      # forward stuff to mulle-craft verbatim
      #
      all|build|clean|onlydependencies|nodependencies|project|sourcetree)
         # shellcheck source=src/mulle-sde-build.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-build.sh"

         sde_build_main "${cmd}" "$@"
      ;;

      dependencies)
         # shellcheck source=src/mulle-sde-dependencies.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-dependencies.sh"

         sde_dependencies_main "$@"
      ;;

      extensions)
         # shellcheck source=src/mulle-sde-extensions.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-extensions.sh"

         sde_extensions_main "$@"
      ;;

      help)
         usage "${MULLE_TRACE}"
      ;;

      init)
         # shellcheck source=src/mulle-sde-init.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-init.sh"

         sde_init_main "$@"
      ;;


      libraries)
         # shellcheck source=src/mulle-sde-libraries.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-libraries.sh"

         sde_libraries_main "$@"
      ;;

      libexec-dir|library-path)
         echo "${MULLE_SDE_LIBEXEC_DIR}"
      ;;

      # for the user it's a sde, but internally we call it
      # a clone for historical reasons, and also sde_sde is
      # stupid
      monitor)
         # shellcheck source=src/mulle-sde-monitor.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-monitor.sh"

         sde_monitor_main "$@"
      ;;

      motd)
         create_motd "$@"
      ;;

      subprojects|minions)
         # shellcheck source=src/mulle-sde-subprojects.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-subprojects.sh"

         sde_subprojects_main "$@"
      ;;

      tools)
         # shellcheck source=src/mulle-sde-tools.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-tools.sh"

         sde_tools_main "$@"
      ;;

      update)
         # shellcheck source=src/mulle-sde-monitor.sh
         . "${MULLE_SDE_LIBEXEC_DIR}/mulle-sde-monitor.sh"

         sde_monitor_main --once --no-craft "$@"
      ;;

      uname)
         echo "${UNAME}"
      ;;

      version)
         echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         #
         # if we are outside of the environment, assume that
         # we want to enter. Otherwise its probably a mistyped command
         #
         if [ ! -z "${MULLE_VIRTUAL_ROOT}" ]
         then
            usage "${MULLE_TRACE}"
         else
            export MULLE_EXECUTABLE_NAME
            mulle-env ${MULLE_ENV_FLAGS} "${cmd}" "$@"
         fi
      ;;
   esac
}


_init "$@" # needs params
main "$@"
