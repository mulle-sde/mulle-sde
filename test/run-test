#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


TEST_DIR="`dirname "$0"`"
PROJECT_DIR="$( cd "${TEST_DIR}/.." ; pwd -P)"

PATH="${PROJECT_DIR}:$PATH"
export PATH



run_shell()
{
   local shell="$1"; shift
   local script="$1" ; shift

   local quote
   local args

   quote="'"
   args=""
   for arg in "$@"
   do
      arg="${arg//${quote}/${quote}\"${quote}\"${quote}}"
      args="${args} '${arg}'"
   done

   local exe

   if exe="`command -v "${shell}"`"
   then
      printf "%s\n" "------------------------------------------" >&2
      printf "%s\n" "$i: ${shell}" >&2
      printf "%s\n" "------------------------------------------" >&2

      if [ "${MULLE_FLAG_LOG_TERSE}" = 'YES' ]
      then
         "${exe}" -c ". \"${script}\" ${args}" "${script}"  > /dev/null 2>&1
      else
         "${exe}" -c ". \"${script}\" ${args}" "${script}"
      fi
   else
      return 0  # not installed ok
   fi
}



main()
{
   _options_mini_main "$@" && set -x

   MULLE_SDE="`which mulle-sde`" || exit 1

   local OPTION_LENIENT='NO'
   local OPTION_SHELL

   while [ $# -ne 0 ]
   do
      case "${1:-}" in
         -l|--lenient)
            OPTION_LENIENT=YES
         ;;

         --zsh)
            OPTION_SHELL=zsh
         ;;

         --bash)
            OPTION_SHELL=bash
         ;;

         *)
            break
         ;;
      esac

      shift
   done


   log_verbose "mulle-sde: `mulle-sde version` (`mulle-sde libexec-dir`)"

   local pattern

   if [ $# -ne 0 ]
   then
      if [ "$1" != '--' ]
      then
         pattern="$1"
      fi
      shift
   fi
   pattern=${pattern:-*}


   local i

   for i in "${TEST_DIR}"/${pattern}
   do
      if [ -x "$i/run-test" ]
      then
         log_verbose "------------------------------------------"
         log_info    "$i:"
         log_verbose "------------------------------------------"

         (
            cd "$i"

            if [ -z "${OPTION_SHELL}" -o "${OPTION_SHELL}" = "bash" ]
            then
               if ! run_shell bash ./run-test "$@"
               then
                  [ "${OPTION_LENIENT}" != 'YES' ] && exit 1
               fi
            fi
            if [ -z "${OPTION_SHELL}" -o "${OPTION_SHELL}" = "zsh" ]
            then
               if ! run_shell zsh ./run-test "$@"
               then
                  [ "${OPTION_LENIENT}" != 'YES' ] && exit 1
               fi
            fi
#
# Dash chokes on <<< as redirection. But I don't want to live without it
# especialy for while read loop parsing
#
#            if ! run_shell dash ./run-test "$@"
#            then
#               [ "${OPTION_LENIENT}" != 'YES' ] && exit 1
#            fi
#
# We can never do ksh because it chokes up on bashisms even if they are
# 'if'ed away
#
#            if ! run_shell ksh ./run-test "$@"
#            then
#               [ "${OPTION_LENIENT}" != 'YES' ] && exit 1
#            fi
         ) || exit 1
      fi
   done
}



main "$@"

