#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


run_mulle_sde()
{
   log_fluff "####################################" >&2
   log_fluff ${MULLE_SDE} ${MULLE_SDE_FLAGS} "$@"
   log_fluff "####################################" >&2

   (
      MULLE_EXECUTABLE="${MULLE_SDE}"
      MULLE_SDE_LIBEXEC_DIR="`${MULLE_SDE} libexec-dir`"

      . "${MULLE_SDE}" ${MULLE_SDE_FLAGS} "$@"
   )
}



expect()
{
   local expected_filename="$1"
   local filename="$2"

   local result
   local diff

   [ ! -f "${expected_filename}" ] && _internal_fail "expected file missing"
   [ ! -f "${filename}" ]          && fail "Result file '${filename}' is missing"

   diff="`diff "${expected_filename}" "${filename}"`"
   case $? in
      0)
      ;;

      1)
         fail "'${expected_filename}' '${filename}':
${diff}"
      ;;

      *)
         fail "diff '${expected_filename}' ${filename}' failed"
      ;;
   esac
}


main()
{
   MULLE_SDE_FLAGS="$@"

   _options_mini_main "$@" && set -x

   MULLE_SDE_EXTENSION_PATH="${PWD}"
   export MULLE_SDE_EXTENSION_PATH

   local directory

   r_make_tmp_directory || exit 1
   directory="${RVAL}"
   directory="${directory:-/tmp/build}"



   run_mulle_sde -s init --project-name "FooBar" \
                         --project-source-dir "files" \
                         --no-post-init \
                         -d "${directory}" \
                         -e test-vendor/extra \
                         none

   [ ! -d "${directory}/.mulle" ] && fail ".mulle directory failed"

   [ ! -f "${directory}/files/file" ]       && fail "\"${directory}/files/file\" not present"
   [ -f "${directory}/files/another-file" ] && fail "\"${directory}/files/another-file\" is present, though shouldn't be"

   expect "extra.txt" "${directory}/files/file"

   log_verbose "----- #1 PASSED -----"

   (
      #
      # because MULLE_USER_PWD is already set mulle-sde will not set it on
      # another run, but then the file will be added out of the temporary
      # project. So set MULLE_USER_PWD manually
      #
      MULLE_USER_PWD="${directory}"
      rexekutor cd "${directory}" &&
      run_mulle_sde -s add -o test-vendor/oneshot another-file.txt
      #
      # As the extension specifies the file to be placed into the
      # PROJECT_SOURCE_DIR which is files, we only say another-file.txt
      # here. (The test is a bit long in the tooth)
   ) || exit 1

   expect "oneshot.txt" "${directory}/files/another-file.txt"

   log_verbose "----- #2 PASSED -----"

   log_info "----- ALL PASSED -----"

   rmdir_safer "${directory}"
}



init()
{
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "file" || exit 1

   MULLE_SDE="${MULLE_SDE:-${PWD}/../../mulle-sde}"
}


init "$@"
main "$@"

