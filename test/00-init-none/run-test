#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


run_mulle_sde()
{
   log_fluff "####################################" >&2
   log_fluff ${MULLE_SDE} ${MULLE_SDE_FLAGS} "$@"
   log_fluff "####################################" >&2

   (
      MULLE_EXECUTABLE="${MULLE_SDE}"
      MULLE_SDE_LIBEXEC_DIR="`${MULLE_SDE} libexec-dir`"

      . "${MULLE_SDE}" ${MULLE_SDE_FLAGS} "$@"
   )
}


expect()
{
   local expected="$1"
   local filename="$2"

   local result

   result="`cat "${filename}"`"
   log_debug "${filename}: ${result}"
   if [ "${expected}" != "${result}" ]
   then
      fail "${filename}: \"${result}\" != \"${expected}\""
   fi
}


main()
{
   MULLE_SDE_FLAGS="$@"

   _options_mini_main "$@" && set -x

   MULLE_SDE_EXTENSION_PATH="${PWD}"
   export MULLE_SDE_EXTENSION_PATH

   local directory

   r_make_tmp_directory
   directory="${RVAL:-/tmp/build}"

   run_mulle_sde -s init -d "${directory}" none

   [ ! -d "${directory}/.mulle" ] && fail ".mulle directory failed"

   files="`( cd "${directory}" ; ls )`"

   if [ ! -z "${files}" ]
   then
      fail "none produced files: ${files}"
   fi

   log_verbose "----- #1 PASSED -----"

   log_info "----- ALL PASSED -----"
   cd ..
   rmdir_safer "${directory}"
}



init()
{
   MULLE_SDE="${MULLE_SDE:-${PWD}/../../mulle-sde}"
}


init "$@"
main "$@"

