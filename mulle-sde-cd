#
# The command "mulle-sde-cd" simplifies the cd `mulle-sde dependency-dir` one
# uses often.
# Put it in the .bashrc.
#
# You can move from kitchen to dependency to project to stash to libexec
# and though they maybe outside of the project a mulle-sde-cd without
# arguments will take you back.
#
# MEMO:
# Do not call "exit" in this script, this can have dire consequences, if it
# actually is being sourced in by .bashrc or .zshrc (most likely) and the
# detection fails....

# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced

tmp_sourced='NO'

if [ -n "$ZSH_VERSION" ]
then
   case "${ZSH_EVAL_CONTEXT}:" in
      *:file:*)
         tmp_sourced='YES'
      ;;
   esac
else
   case ${0##*/} in
      mulle-bash|dash|-dash|bash|-bash|ksh|-ksh|sh|-sh)
         tmp_sourced='YES'
      ;;
   esac
fi


if [ "${tmp_sourced}" = 'YES' ]
then
   #
   # This function simplifies the cd `mulle-sde dependency-dir` one uses often
   # Put it in the .bashrc.
   #
   # You can move from kitchen to dependency to project to stash to libexec
   # and though they maybe outside of the project a mulle-sde-cd without
   # arguments will take you back.
   #
   function mulle_sde_cd()
   {
      local dir
      local project_dir
      local pwd
      local rc

      if [ $# -eq 0 ]
      then
         if [ ! -z "${MULLE_SDE_LAST_PROJECT_DIR}" ]
         then
            cd "${MULLE_SDE_LAST_PROJECT_DIR}"
            unset MULLE_SDE_LAST_PROJECT_DIR
            return $?
         fi
         return 1
      fi

      # https://stackoverflow.com/questions/20398499/remove-last-argument-from-argument-list-of-shell-script-bash
      dir="${*: -1}"
      set -- "${@:1:$(($# - 1))}"

      if [ ! -d "${dir}" ]
      then
         case ${dir} in
            -h|--help|help)
               cat <<EOF >&2
   Usage:
      mulle-sde-cd [dir]

      Known directory names are:
         addiction, craftorder-kitchen, dependency, kitchen, libexec, project
         stash

      Without a "dir" argument mulle-sde-cd returns to the last project directory,
      if there was any.
EOF
               return 1
            ;;

            addiction|craftorder-kitchen|dependency|kitchen|libexec|project|stash)
               dir="${dir}-dir"
            ;;

            addiction-dir|craftorder-kitchen-dir|dependency-dir|kitchen-dir|libexec-dir|project-dir|stash-dir)
            ;;

            # just get default error message
            ''|*)
               cd "$@" "${dir}"
               return $?
            ;;
         esac

         #
         # figure out project we are in now, which we need to remember
         # in MULLE_SDE_LAST_PROJECT_DIR so that we can get back
         #
         rc=0
         if ! project_dir="`mulle-sde "project-dir"`"
         then
            if [ -z "${MULLE_SDE_LAST_PROJECT_DIR}" ]
            then
               echo "No mulle-sde project here" >&2
               return 1
            fi

            old="$PWD"
               cd "${MULLE_SDE_LAST_PROJECT_DIR}" || return $?
               if ! project_dir="`mulle-sde "project-dir"`"
               then
                  rc=1
                  echo "No mulle-sde project here" >&2
               else
                  dir="`mulle-sde "${dir}" `"
                  rc=$?
               fi
            cd "$old"
         else
            dir="`mulle-sde "${dir}" `"
            rc=$?
         fi

         [ $rc -ne 0 ] && return $rc

         MULLE_SDE_LAST_PROJECT_DIR="${project_dir}"
         export MULLE_SDE_LAST_PROJECT_DIR
      fi
      cd "$@" "${dir}"
   }

   alias mulle-sde-cd=mulle_sde_cd
else
   printf "%s\n" "mulle-sde-cd must be sourced by the shell. Use:\n
. \`which mulle-sde-cd\`\n" >&2
fi


unset tmp_sourced
